// <copyright file="PlayersInGameEventArgsTest.Constructor01.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Messaging.Events
{
    public partial class PlayersInGameEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
public void Constructor01922()
{
    PlayersInGameEventArgs playersInGameEventArgs;
    string[] ss = new string[3];
    ss[0] = "1";
    ss[1] = "0";
    ss[2] = "0";
    playersInGameEventArgs = this.Constructor01(ss);
    Assert.IsNotNull((object)playersInGameEventArgs);
    Assert.AreEqual<int>(1, playersInGameEventArgs.NumberOfPlayers);
    Assert.IsNotNull(playersInGameEventArgs.Players);
    Assert.AreEqual<int>(1, playersInGameEventArgs.Players.Length);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[0].Id);
    Assert.AreEqual<string>("0", playersInGameEventArgs.Players[0].Nickname);
    Assert.AreEqual<int>(0, ((GameEventArgs)playersInGameEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)playersInGameEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)playersInGameEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)playersInGameEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException649()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      string[] ss = new string[3];
      ss[0] = "0\0";
      ss[1] = "0\0";
      ss[2] = "0\0";
      playersInGameEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException808()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      string[] ss = new string[3];
      ss[0] = "0";
      ss[1] = "0-";
      ss[2] = "0-";
      playersInGameEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException67()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      string[] ss = new string[3];
      ss[0] = "-0";
      ss[1] = "-0";
      ss[2] = "-0";
      playersInGameEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException552()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      string[] ss = new string[3];
      ss[0] = "0";
      ss[1] = "0";
      ss[2] = "0";
      playersInGameEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException242()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      string[] ss = new string[3];
      ss[0] = "-\0";
      ss[1] = "-\0";
      ss[2] = "-\0";
      playersInGameEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException3()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      string[] ss = new string[3];
      ss[0] = ":";
      ss[1] = ":";
      ss[2] = ":";
      playersInGameEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException63()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      string[] ss = new string[3];
      ss[0] = "-";
      ss[1] = "-";
      ss[2] = "-";
      playersInGameEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException278()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      string[] ss = new string[3];
      ss[0] = "\u0001";
      ss[1] = "\u0001";
      ss[2] = "\u0001";
      playersInGameEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException320()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      string[] ss = new string[3];
      ss[0] = "\0";
      ss[1] = "\0";
      ss[2] = "\0";
      playersInGameEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException591()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      string[] ss = new string[3];
      ss[0] = "";
      ss[1] = "";
      ss[2] = "";
      playersInGameEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException483()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      string[] ss = new string[3];
      playersInGameEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException595()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      string[] ss = new string[0];
      playersInGameEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException721()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      playersInGameEventArgs = this.Constructor01((string[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
public void Constructor213()
{
    PlayersInGameEventArgs playersInGameEventArgs;
    PlayerInGame[] playerInGames = new PlayerInGame[1];
    playersInGameEventArgs = this.Constructor(playerInGames);
    Assert.IsNotNull((object)playersInGameEventArgs);
    Assert.AreEqual<int>(1, playersInGameEventArgs.NumberOfPlayers);
    Assert.IsNotNull(playersInGameEventArgs.Players);
    Assert.AreEqual<int>(1, playersInGameEventArgs.Players.Length);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[0].Id);
    Assert.AreEqual<string>
        ((string)null, playersInGameEventArgs.Players[0].Nickname);
    Assert.AreEqual<int>(0, ((GameEventArgs)playersInGameEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)playersInGameEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)playersInGameEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)playersInGameEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException853()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      PlayerInGame[] playerInGames = new PlayerInGame[0];
      playersInGameEventArgs = this.Constructor(playerInGames);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException990()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      playersInGameEventArgs = this.Constructor((PlayerInGame[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
