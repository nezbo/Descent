// <copyright file="SpawnMonsterEventArgsTest.PopulateWithArgs.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Messaging.Events
{
    public partial class SpawnMonsterEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(SpawnMonsterEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException450()
{
    try
    {
      SpawnMonsterEventArgs spawnMonsterEventArgs;
      spawnMonsterEventArgs = new SpawnMonsterEventArgs(0, 0, 0);
      ((GameEventArgs)spawnMonsterEventArgs).SenderId = 0;
      ((GameEventArgs)spawnMonsterEventArgs).EventId = (string)null;
      ((GameEventArgs)spawnMonsterEventArgs).EventType = (EventType)0;
      ((GameEventArgs)spawnMonsterEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      ss[0] = "-0\0";
      ss[1] = "";
      ss[2] = "";
      this.PopulateWithArgs(spawnMonsterEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(SpawnMonsterEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException461()
{
    try
    {
      SpawnMonsterEventArgs spawnMonsterEventArgs;
      spawnMonsterEventArgs = new SpawnMonsterEventArgs(0, 0, 0);
      ((GameEventArgs)spawnMonsterEventArgs).SenderId = 0;
      ((GameEventArgs)spawnMonsterEventArgs).EventId = (string)null;
      ((GameEventArgs)spawnMonsterEventArgs).EventType = (EventType)0;
      ((GameEventArgs)spawnMonsterEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      ss[0] = "-9";
      ss[1] = "-9";
      ss[2] = "-9";
      this.PopulateWithArgs(spawnMonsterEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(SpawnMonsterEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException364()
{
    try
    {
      SpawnMonsterEventArgs spawnMonsterEventArgs;
      spawnMonsterEventArgs = new SpawnMonsterEventArgs(0, 0, 0);
      ((GameEventArgs)spawnMonsterEventArgs).SenderId = 0;
      ((GameEventArgs)spawnMonsterEventArgs).EventId = (string)null;
      ((GameEventArgs)spawnMonsterEventArgs).EventType = (EventType)0;
      ((GameEventArgs)spawnMonsterEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      ss[0] = "-\0";
      ss[1] = "-\0";
      ss[2] = "-\0";
      this.PopulateWithArgs(spawnMonsterEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(SpawnMonsterEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException925()
{
    try
    {
      SpawnMonsterEventArgs spawnMonsterEventArgs;
      spawnMonsterEventArgs = new SpawnMonsterEventArgs(0, 0, 0);
      ((GameEventArgs)spawnMonsterEventArgs).SenderId = 0;
      ((GameEventArgs)spawnMonsterEventArgs).EventId = (string)null;
      ((GameEventArgs)spawnMonsterEventArgs).EventType = (EventType)0;
      ((GameEventArgs)spawnMonsterEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      ss[0] = ":";
      ss[1] = ":";
      ss[2] = ":";
      this.PopulateWithArgs(spawnMonsterEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(SpawnMonsterEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException64()
{
    try
    {
      SpawnMonsterEventArgs spawnMonsterEventArgs;
      spawnMonsterEventArgs = new SpawnMonsterEventArgs(0, 0, 0);
      ((GameEventArgs)spawnMonsterEventArgs).SenderId = 0;
      ((GameEventArgs)spawnMonsterEventArgs).EventId = (string)null;
      ((GameEventArgs)spawnMonsterEventArgs).EventType = (EventType)0;
      ((GameEventArgs)spawnMonsterEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      ss[0] = "-";
      ss[1] = "-";
      ss[2] = "-";
      this.PopulateWithArgs(spawnMonsterEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(SpawnMonsterEventArgsTest))]
public void PopulateWithArgs912()
{
    SpawnMonsterEventArgs spawnMonsterEventArgs;
    spawnMonsterEventArgs = new SpawnMonsterEventArgs(0, 0, 0);
    ((GameEventArgs)spawnMonsterEventArgs).SenderId = 0;
    ((GameEventArgs)spawnMonsterEventArgs).EventId = (string)null;
    ((GameEventArgs)spawnMonsterEventArgs).EventType = (EventType)0;
    ((GameEventArgs)spawnMonsterEventArgs).NeedResponse = false;
    string[] ss = new string[3];
    ss[0] = "0";
    ss[1] = "0";
    ss[2] = "0";
    this.PopulateWithArgs(spawnMonsterEventArgs, ss);
    Assert.IsNotNull((object)spawnMonsterEventArgs);
    Assert.AreEqual<int>(0, spawnMonsterEventArgs.X);
    Assert.AreEqual<int>(0, spawnMonsterEventArgs.Y);
    Assert.AreEqual<int>(0, spawnMonsterEventArgs.MonsterId);
    Assert.AreEqual<int>(0, ((GameEventArgs)spawnMonsterEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)spawnMonsterEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)spawnMonsterEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)spawnMonsterEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(SpawnMonsterEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException548()
{
    try
    {
      SpawnMonsterEventArgs spawnMonsterEventArgs;
      spawnMonsterEventArgs = new SpawnMonsterEventArgs(0, 0, 0);
      ((GameEventArgs)spawnMonsterEventArgs).SenderId = 0;
      ((GameEventArgs)spawnMonsterEventArgs).EventId = (string)null;
      ((GameEventArgs)spawnMonsterEventArgs).EventType = (EventType)0;
      ((GameEventArgs)spawnMonsterEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      ss[0] = "\u0001";
      ss[1] = "\u0001";
      ss[2] = "\u0001";
      this.PopulateWithArgs(spawnMonsterEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(SpawnMonsterEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException115()
{
    try
    {
      SpawnMonsterEventArgs spawnMonsterEventArgs;
      spawnMonsterEventArgs = new SpawnMonsterEventArgs(0, 0, 0);
      ((GameEventArgs)spawnMonsterEventArgs).SenderId = 0;
      ((GameEventArgs)spawnMonsterEventArgs).EventId = (string)null;
      ((GameEventArgs)spawnMonsterEventArgs).EventType = (EventType)0;
      ((GameEventArgs)spawnMonsterEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      ss[0] = "\0";
      ss[1] = "\0";
      ss[2] = "\0";
      this.PopulateWithArgs(spawnMonsterEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(SpawnMonsterEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException355()
{
    try
    {
      SpawnMonsterEventArgs spawnMonsterEventArgs;
      spawnMonsterEventArgs = new SpawnMonsterEventArgs(0, 0, 0);
      ((GameEventArgs)spawnMonsterEventArgs).SenderId = 0;
      ((GameEventArgs)spawnMonsterEventArgs).EventId = (string)null;
      ((GameEventArgs)spawnMonsterEventArgs).EventType = (EventType)0;
      ((GameEventArgs)spawnMonsterEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      ss[0] = "";
      ss[1] = "";
      ss[2] = "";
      this.PopulateWithArgs(spawnMonsterEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(SpawnMonsterEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException973()
{
    try
    {
      SpawnMonsterEventArgs spawnMonsterEventArgs;
      spawnMonsterEventArgs = new SpawnMonsterEventArgs(0, 0, 0);
      ((GameEventArgs)spawnMonsterEventArgs).SenderId = 0;
      ((GameEventArgs)spawnMonsterEventArgs).EventId = (string)null;
      ((GameEventArgs)spawnMonsterEventArgs).EventType = (EventType)0;
      ((GameEventArgs)spawnMonsterEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      this.PopulateWithArgs(spawnMonsterEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(SpawnMonsterEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException956()
{
    try
    {
      SpawnMonsterEventArgs spawnMonsterEventArgs;
      spawnMonsterEventArgs = new SpawnMonsterEventArgs(0, 0, 0);
      ((GameEventArgs)spawnMonsterEventArgs).SenderId = 0;
      ((GameEventArgs)spawnMonsterEventArgs).EventId = (string)null;
      ((GameEventArgs)spawnMonsterEventArgs).EventType = (EventType)0;
      ((GameEventArgs)spawnMonsterEventArgs).NeedResponse = false;
      string[] ss = new string[0];
      this.PopulateWithArgs(spawnMonsterEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(SpawnMonsterEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException681()
{
    try
    {
      SpawnMonsterEventArgs spawnMonsterEventArgs;
      spawnMonsterEventArgs = new SpawnMonsterEventArgs(0, 0, 0);
      ((GameEventArgs)spawnMonsterEventArgs).SenderId = 0;
      ((GameEventArgs)spawnMonsterEventArgs).EventId = (string)null;
      ((GameEventArgs)spawnMonsterEventArgs).EventType = (EventType)0;
      ((GameEventArgs)spawnMonsterEventArgs).NeedResponse = false;
      this.PopulateWithArgs(spawnMonsterEventArgs, (string[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
