// <copyright file="PlayerEventArgsTest.PopulateWithArgs.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Messaging.Events
{
    public partial class PlayerEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException926()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      playerEventArgs = new PlayerEventArgs(1);
      ((GameEventArgs)playerEventArgs).SenderId = 0;
      ((GameEventArgs)playerEventArgs).EventId = (string)null;
      ((GameEventArgs)playerEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerEventArgs).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = "-00:";
      this.PopulateWithArgs(playerEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException337()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      playerEventArgs = new PlayerEventArgs(1);
      ((GameEventArgs)playerEventArgs).SenderId = 0;
      ((GameEventArgs)playerEventArgs).EventId = (string)null;
      ((GameEventArgs)playerEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerEventArgs).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = "-0:";
      this.PopulateWithArgs(playerEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException598()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      playerEventArgs = new PlayerEventArgs(1);
      ((GameEventArgs)playerEventArgs).SenderId = 0;
      ((GameEventArgs)playerEventArgs).EventId = (string)null;
      ((GameEventArgs)playerEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerEventArgs).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = "-\0";
      this.PopulateWithArgs(playerEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException8()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      playerEventArgs = new PlayerEventArgs(1);
      ((GameEventArgs)playerEventArgs).SenderId = 0;
      ((GameEventArgs)playerEventArgs).EventId = (string)null;
      ((GameEventArgs)playerEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerEventArgs).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = "-";
      this.PopulateWithArgs(playerEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException219()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      playerEventArgs = new PlayerEventArgs(1);
      ((GameEventArgs)playerEventArgs).SenderId = 0;
      ((GameEventArgs)playerEventArgs).EventId = (string)null;
      ((GameEventArgs)playerEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerEventArgs).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = ":";
      this.PopulateWithArgs(playerEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
public void PopulateWithArgs774()
{
    PlayerEventArgs playerEventArgs;
    playerEventArgs = new PlayerEventArgs(1);
    ((GameEventArgs)playerEventArgs).SenderId = 0;
    ((GameEventArgs)playerEventArgs).EventId = (string)null;
    ((GameEventArgs)playerEventArgs).EventType = (EventType)0;
    ((GameEventArgs)playerEventArgs).NeedResponse = false;
    string[] ss = new string[1];
    ss[0] = "0";
    this.PopulateWithArgs(playerEventArgs, ss);
    Assert.IsNotNull((object)playerEventArgs);
    Assert.AreEqual<int>(0, playerEventArgs.PlayerId);
    Assert.AreEqual<int>(0, ((GameEventArgs)playerEventArgs).SenderId);
    Assert.AreEqual<string>((string)null, ((GameEventArgs)playerEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)playerEventArgs).EventType);
    Assert.AreEqual<bool>(false, ((GameEventArgs)playerEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException893()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      playerEventArgs = new PlayerEventArgs(1);
      ((GameEventArgs)playerEventArgs).SenderId = 0;
      ((GameEventArgs)playerEventArgs).EventId = (string)null;
      ((GameEventArgs)playerEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerEventArgs).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = "\0";
      this.PopulateWithArgs(playerEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException998()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      playerEventArgs = new PlayerEventArgs(1);
      ((GameEventArgs)playerEventArgs).SenderId = 0;
      ((GameEventArgs)playerEventArgs).EventId = (string)null;
      ((GameEventArgs)playerEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerEventArgs).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = "";
      this.PopulateWithArgs(playerEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException728()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      playerEventArgs = new PlayerEventArgs(1);
      ((GameEventArgs)playerEventArgs).SenderId = 0;
      ((GameEventArgs)playerEventArgs).EventId = (string)null;
      ((GameEventArgs)playerEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerEventArgs).NeedResponse = false;
      string[] ss = new string[1];
      this.PopulateWithArgs(playerEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException479()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      playerEventArgs = new PlayerEventArgs(1);
      ((GameEventArgs)playerEventArgs).SenderId = 0;
      ((GameEventArgs)playerEventArgs).EventId = (string)null;
      ((GameEventArgs)playerEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerEventArgs).NeedResponse = false;
      string[] ss = new string[0];
      this.PopulateWithArgs(playerEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException199()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      playerEventArgs = new PlayerEventArgs(1);
      ((GameEventArgs)playerEventArgs).SenderId = 0;
      ((GameEventArgs)playerEventArgs).EventId = (string)null;
      ((GameEventArgs)playerEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerEventArgs).NeedResponse = false;
      this.PopulateWithArgs(playerEventArgs, (string[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
