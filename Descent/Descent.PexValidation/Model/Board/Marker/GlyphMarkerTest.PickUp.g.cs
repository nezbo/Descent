// <copyright file="GlyphMarkerTest.PickUp.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.Pex.Framework.Explorable;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Pex.Framework.Generated;
using Descent.Model.Player.Figure;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Descent.Model.Board.Marker
{
    public partial class GlyphMarkerTest
    {
[TestMethod]
[PexGeneratedBy(typeof(GlyphMarkerTest))]
public void PickUp820()
{
    GlyphMarker glyphMarker;
    glyphMarker = PexInvariant.CreateInstance<GlyphMarker>();
    PexInvariant.SetField<int>((object)glyphMarker, "id", 0);
    PexInvariant.SetField<string>((object)glyphMarker, "name", (string)null);
    PexInvariant.SetField<Texture2D>
        ((object)glyphMarker, "texture", (Texture2D)null);
    PexInvariant.SetField<int>((object)glyphMarker, "movementPoints", 0);
    PexInvariant.SetField<Texture2D>
        ((object)glyphMarker, "openTexture", (Texture2D)null);
    PexInvariant.SetField<bool>((object)glyphMarker, 
                                "<Open>k__BackingField", PexSafeHelpers.ByteToBoolean((byte)4));
    PexInvariant.CheckInvariant((object)glyphMarker);
    this.PickUp(glyphMarker, (Hero)null);
    Assert.IsNotNull((object)glyphMarker);
    Assert.AreEqual<bool>(PexSafeHelpers.ByteToBoolean((byte)4), glyphMarker.Open);
    Assert.AreEqual<int>
        (0, ((global::Descent.Model.Board.Marker.Marker)glyphMarker).Id);
    Assert.AreEqual<string>
        ((string)null, ((global::Descent.Model.Board.Marker.Marker)glyphMarker).Name);
    Assert.IsNull(((global::Descent.Model.Board.Marker.Marker)glyphMarker).Texture);
    Assert.AreEqual<int>
        (0, ((global::Descent.Model.Board.Marker.Marker)glyphMarker).MovementPoints);
}
[TestMethod]
[PexGeneratedBy(typeof(GlyphMarkerTest))]
public void PickUp970()
{
    GlyphMarker glyphMarker;
    glyphMarker = PexInvariant.CreateInstance<GlyphMarker>();
    PexInvariant.SetField<int>((object)glyphMarker, "id", 0);
    PexInvariant.SetField<string>((object)glyphMarker, "name", (string)null);
    PexInvariant.SetField<Texture2D>
        ((object)glyphMarker, "texture", (Texture2D)null);
    PexInvariant.SetField<int>((object)glyphMarker, "movementPoints", 0);
    PexInvariant.SetField<Texture2D>
        ((object)glyphMarker, "openTexture", (Texture2D)null);
    PexInvariant.SetField<bool>((object)glyphMarker, "<Open>k__BackingField", false);
    PexInvariant.CheckInvariant((object)glyphMarker);
    this.PickUp(glyphMarker, (Hero)null);
    Assert.IsNotNull((object)glyphMarker);
    Assert.AreEqual<bool>(true, glyphMarker.Open);
    Assert.AreEqual<int>
        (0, ((global::Descent.Model.Board.Marker.Marker)glyphMarker).Id);
    Assert.AreEqual<string>
        ((string)null, ((global::Descent.Model.Board.Marker.Marker)glyphMarker).Name);
    Assert.IsNull(((global::Descent.Model.Board.Marker.Marker)glyphMarker).Texture);
    Assert.AreEqual<int>
        (0, ((global::Descent.Model.Board.Marker.Marker)glyphMarker).MovementPoints);
}
    }
}
