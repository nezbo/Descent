static_diagram FORMEL_PLAYER
component
	class HERO_PARTY -- A party of heroes
		feature
			numberOfHeroes: INTEGER -- How many players are in the HeroParty?
				ensure
					Result >= 2 and Result <= 4;
			end
			numberOfHeroesYetToAct: INTEGER -- How many players have yet to take their turn?
				ensure
					Result >= 0;
					Result <= numberOfPlayers;
			end
			hasHeroesActedYet: BOOLEAN -- Has 'this' player yet to take their turn?
				-> hero: Hero
				require
					hero /= Void
			end
			conquestTokens: INTEGER -- How many conquest tokens do the players have?
			isConquestPoolEmpty: BOOLEAN -- How many conquest tokens do the players have?
				ensure
					Result -> conquestTokens = 0;
			end
			heroHasActed: Void -- Remove 'this' player from the list of players yet to act!
				-> hero: Hero
				require
					hero /= Void;
				ensure
					old not hasHeroActed -> hasHeroActedYet = true;
					numberOfHeroesYetToAct + 1 = old numberOfHeroesYetToAct;
			end
			resetYetToAct: Void -- Reset list of Hero yet to act!
				require
					numberOfHeroesYetToAct = 0;
				ensure
					numberOfHeroesYetToAct = numberOfHeroes;
			end
			removeConquestTokens: Void -- Remove 'this' number of conquest tokens from the pool of tokens!
				-> INTEGER: tokens
				require
					tokens > 0;
				ensure
					conquestTokens = old conquestTokens - tokens;
			end
			addConquestTokens: Void -- Add 'this' number of conquest tokens to the pool of tokens!
				-> INTEGER: tokens
				require
					tokens > 0;
				ensure
					conquestTokens = old conquestTokens + tokens;
			end
		invariant
			numberOfHeroes >= 2 and numberOfHeroes <= 4;
	end
	
	class OVERLORD -- The role of a overlord, that a hero can be
		feature
			numberOfOverlordCardsInHand: INTEGER -- The role of a overlord, that a hero can be
			threatTokens: INTEGER -- How many threat tokens do you have?
			overlordCardsInHand: SEQUENCE[OVERLORD_CARD] -- What cards do you have?
				ensure
					Result.length = numberOfOverlordCardsInHand;
			end
			overlordCardsInDeck: INTEGER -- How many cards are in your overlord deck?
			overlordCardsInDiscard: INTEGER -- How many cards are in your overlord discard?
			drawOverlordCards: Void -- Draw 'this' many cards!
				-> cards: INTERGER
				require
					cards > 0;
				ensure
					overlordCardsInHand = old overlordCardsInHand + cards;
			end
			shuffleOverlordDiscardIntoDeck: Void -- Shuffle the overlord discard into the deck!
				require
					overlordCardsInDeck = 0;
				ensure
					overlordCardsInDiscard = 0;
					overlordCardsInDeck = old overlordCardsInDiscard;
			end
		invariant
			-- When it is not the overlords turn, the overlord cannot have more than 7 cards in hand.
			true;
	end	
end
static_diagram FORMAL_STATE_STUFF
component
	class STATE_MANAGER
		indexing 
			author: "Martin Marcher";
		feature
			GetInstance: STATE_MANAGER -- Can I have the unique object of this class?
			CurrentState: STATE -- What is the current state?
			PreviousStates: SEQUENCE[STATE] -- What was the previous 'n' states?
				-> count: INTEGER
				require
					count > 0;
				ensure
					Result.length = count;
			end
			NextPossibleStates: SEQUENCE[STATE] -- What are the next possible states?
	end
	class STATE_MACHINE
		indexing
			author: "Martin Marcher";
		feature
			CurrentState: STATE -- What is the current state?
			NextState: STATE -- What is the next state?
			PreviousStates: SEQUENCE[STATE] -- What was the previous 'n' states?
				-> count: INTEGER
				require
					count > 0;
				ensure
					Result.length = count;
			end
			ChangeToNextState: Void -- Change to next state!
			PlaceStates: Void -- Place these states after the current state
				-> states: SEQUENCE[STATE]
				ensure
					NextState = states.First;
			end
			invariant
				CurrentState /= Void;
				NextState /= Void;
	end
end