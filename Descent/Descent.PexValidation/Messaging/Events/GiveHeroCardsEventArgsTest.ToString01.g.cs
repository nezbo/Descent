// <copyright file="GiveHeroCardsEventArgsTest.ToString01.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace Descent.Messaging.Events
{
    public partial class GiveHeroCardsEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(GiveHeroCardsEventArgsTest))]
public void ToString01480()
{
    GiveHeroCardsEventArgs giveHeroCardsEventArgs;
    string s;
    int[] ints = new int[15];
    giveHeroCardsEventArgs = new GiveHeroCardsEventArgs(int.MaxValue, ints);
    ((GameEventArgs)giveHeroCardsEventArgs).SenderId = 0;
    ((GameEventArgs)giveHeroCardsEventArgs).EventId = (string)null;
    ((GameEventArgs)giveHeroCardsEventArgs).EventType = (EventType)0;
    ((GameEventArgs)giveHeroCardsEventArgs).NeedResponse = false;
    s = this.ToString01(giveHeroCardsEventArgs);
    Assert.AreEqual<string>("2147483647,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0", s);
    Assert.IsNotNull((object)giveHeroCardsEventArgs);
    Assert.AreEqual<int>(int.MaxValue, giveHeroCardsEventArgs.PlayerId);
    Assert.IsNotNull(giveHeroCardsEventArgs.HeroCardIds);
    Assert.AreEqual<int>(15, giveHeroCardsEventArgs.HeroCardIds.Length);
    Assert.AreEqual<int>(0, giveHeroCardsEventArgs.HeroCardIds[0]);
    Assert.AreEqual<int>(0, giveHeroCardsEventArgs.HeroCardIds[1]);
    Assert.AreEqual<int>(0, giveHeroCardsEventArgs.HeroCardIds[2]);
    Assert.AreEqual<int>(0, giveHeroCardsEventArgs.HeroCardIds[3]);
    Assert.AreEqual<int>(0, giveHeroCardsEventArgs.HeroCardIds[4]);
    Assert.AreEqual<int>(0, giveHeroCardsEventArgs.HeroCardIds[5]);
    Assert.AreEqual<int>(0, giveHeroCardsEventArgs.HeroCardIds[6]);
    Assert.AreEqual<int>(0, giveHeroCardsEventArgs.HeroCardIds[7]);
    Assert.AreEqual<int>(0, giveHeroCardsEventArgs.HeroCardIds[8]);
    Assert.AreEqual<int>(0, giveHeroCardsEventArgs.HeroCardIds[9]);
    Assert.AreEqual<int>(0, giveHeroCardsEventArgs.HeroCardIds[10]);
    Assert.AreEqual<int>(0, giveHeroCardsEventArgs.HeroCardIds[11]);
    Assert.AreEqual<int>(0, giveHeroCardsEventArgs.HeroCardIds[12]);
    Assert.AreEqual<int>(0, giveHeroCardsEventArgs.HeroCardIds[13]);
    Assert.AreEqual<int>(0, giveHeroCardsEventArgs.HeroCardIds[14]);
    Assert.AreEqual<int>(0, ((GameEventArgs)giveHeroCardsEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)giveHeroCardsEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)giveHeroCardsEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)giveHeroCardsEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(GiveHeroCardsEventArgsTest))]
public void ToString0173()
{
    GiveHeroCardsEventArgs giveHeroCardsEventArgs;
    string s;
    int[] ints = new int[1];
    giveHeroCardsEventArgs = new GiveHeroCardsEventArgs(1, ints);
    ((GameEventArgs)giveHeroCardsEventArgs).SenderId = 0;
    ((GameEventArgs)giveHeroCardsEventArgs).EventId = (string)null;
    ((GameEventArgs)giveHeroCardsEventArgs).EventType = (EventType)0;
    ((GameEventArgs)giveHeroCardsEventArgs).NeedResponse = false;
    s = this.ToString01(giveHeroCardsEventArgs);
    Assert.AreEqual<string>("1,1,0", s);
    Assert.IsNotNull((object)giveHeroCardsEventArgs);
    Assert.AreEqual<int>(1, giveHeroCardsEventArgs.PlayerId);
    Assert.IsNotNull(giveHeroCardsEventArgs.HeroCardIds);
    Assert.AreEqual<int>(1, giveHeroCardsEventArgs.HeroCardIds.Length);
    Assert.AreEqual<int>(0, giveHeroCardsEventArgs.HeroCardIds[0]);
    Assert.AreEqual<int>(0, ((GameEventArgs)giveHeroCardsEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)giveHeroCardsEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)giveHeroCardsEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)giveHeroCardsEventArgs).NeedResponse);
}
    }
}
