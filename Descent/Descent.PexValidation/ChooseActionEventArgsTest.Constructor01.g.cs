// <copyright file="ChooseActionEventArgsTest.Constructor01.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Messaging.Events
{
    public partial class ChooseActionEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(ChooseActionEventArgsTest))]
public void Constructor01369()
{
    ChooseActionEventArgs chooseActionEventArgs;
    string[] ss = new string[1];
    ss[0] = "1";
    chooseActionEventArgs = this.Constructor01(ss);
    Assert.IsNotNull((object)chooseActionEventArgs);
    Assert.AreEqual<ActionType>
        (ActionType.Advance, chooseActionEventArgs.ActionType);
    Assert.AreEqual<int>(0, ((GameEventArgs)chooseActionEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)chooseActionEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)chooseActionEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)chooseActionEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(ChooseActionEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException138()
{
    try
    {
      ChooseActionEventArgs chooseActionEventArgs;
      string[] ss = new string[1];
      ss[0] = "-0";
      chooseActionEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(ChooseActionEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException548()
{
    try
    {
      ChooseActionEventArgs chooseActionEventArgs;
      string[] ss = new string[1];
      ss[0] = "-\0";
      chooseActionEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(ChooseActionEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException404()
{
    try
    {
      ChooseActionEventArgs chooseActionEventArgs;
      string[] ss = new string[1];
      ss[0] = "0\0";
      chooseActionEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(ChooseActionEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException766()
{
    try
    {
      ChooseActionEventArgs chooseActionEventArgs;
      string[] ss = new string[1];
      ss[0] = "-";
      chooseActionEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(ChooseActionEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException901()
{
    try
    {
      ChooseActionEventArgs chooseActionEventArgs;
      string[] ss = new string[1];
      ss[0] = ":";
      chooseActionEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(ChooseActionEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException834()
{
    try
    {
      ChooseActionEventArgs chooseActionEventArgs;
      string[] ss = new string[1];
      ss[0] = "0";
      chooseActionEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(ChooseActionEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException669()
{
    try
    {
      ChooseActionEventArgs chooseActionEventArgs;
      string[] ss = new string[1];
      ss[0] = "\u0001";
      chooseActionEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(ChooseActionEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException481()
{
    try
    {
      ChooseActionEventArgs chooseActionEventArgs;
      string[] ss = new string[1];
      ss[0] = "\0";
      chooseActionEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(ChooseActionEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException601()
{
    try
    {
      ChooseActionEventArgs chooseActionEventArgs;
      string[] ss = new string[1];
      ss[0] = "";
      chooseActionEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(ChooseActionEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException281()
{
    try
    {
      ChooseActionEventArgs chooseActionEventArgs;
      string[] ss = new string[1];
      chooseActionEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(ChooseActionEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException347()
{
    try
    {
      ChooseActionEventArgs chooseActionEventArgs;
      string[] ss = new string[0];
      chooseActionEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(ChooseActionEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException448()
{
    try
    {
      ChooseActionEventArgs chooseActionEventArgs;
      chooseActionEventArgs = this.Constructor01((string[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(ChooseActionEventArgsTest))]
public void Constructor719()
{
    ChooseActionEventArgs chooseActionEventArgs;
    chooseActionEventArgs = this.Constructor((ActionType)0);
    Assert.IsNotNull((object)chooseActionEventArgs);
    Assert.AreEqual<ActionType>((ActionType)0, chooseActionEventArgs.ActionType);
    Assert.AreEqual<int>(0, ((GameEventArgs)chooseActionEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)chooseActionEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)chooseActionEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)chooseActionEventArgs).NeedResponse);
}
    }
}
