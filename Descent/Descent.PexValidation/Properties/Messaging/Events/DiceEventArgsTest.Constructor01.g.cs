// <copyright file="DiceEventArgsTest.Constructor01.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Messaging.Events
{
    public partial class DiceEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(DiceEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException868()
{
    try
    {
      DiceEventArgs diceEventArgs;
      string[] ss = new string[2];
      ss[0] = "-0\0";
      ss[1] = "\0";
      diceEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DiceEventArgsTest))]
public void Constructor0147()
{
    DiceEventArgs diceEventArgs;
    string[] ss = new string[2];
    ss[0] = "0";
    ss[1] = "0";
    diceEventArgs = this.Constructor01(ss);
    Assert.IsNotNull((object)diceEventArgs);
    Assert.AreEqual<int>(0, diceEventArgs.DiceId);
    Assert.AreEqual<int>(0, diceEventArgs.SideId);
    Assert.AreEqual<int>(0, ((GameEventArgs)diceEventArgs).SenderId);
    Assert.AreEqual<string>((string)null, ((GameEventArgs)diceEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)diceEventArgs).EventType);
    Assert.AreEqual<bool>(false, ((GameEventArgs)diceEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(DiceEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException325()
{
    try
    {
      DiceEventArgs diceEventArgs;
      string[] ss = new string[2];
      ss[0] = "\0\0";
      ss[1] = "\0\0";
      diceEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DiceEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException60()
{
    try
    {
      DiceEventArgs diceEventArgs;
      string[] ss = new string[0];
      diceEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DiceEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException852()
{
    try
    {
      DiceEventArgs diceEventArgs;
      diceEventArgs = this.Constructor01((string[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DiceEventArgsTest))]
public void Constructor285()
{
    DiceEventArgs diceEventArgs;
    diceEventArgs = this.Constructor(0, 0);
    Assert.IsNotNull((object)diceEventArgs);
    Assert.AreEqual<int>(0, diceEventArgs.DiceId);
    Assert.AreEqual<int>(0, diceEventArgs.SideId);
    Assert.AreEqual<int>(0, ((GameEventArgs)diceEventArgs).SenderId);
    Assert.AreEqual<string>((string)null, ((GameEventArgs)diceEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)diceEventArgs).EventType);
    Assert.AreEqual<bool>(false, ((GameEventArgs)diceEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(DiceEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException305()
{
    try
    {
      DiceEventArgs diceEventArgs;
      diceEventArgs = this.Constructor(0, int.MinValue);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DiceEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException291()
{
    try
    {
      DiceEventArgs diceEventArgs;
      string[] ss = new string[2];
      ss[0] = "-\0";
      ss[1] = "-\0";
      diceEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DiceEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException57()
{
    try
    {
      DiceEventArgs diceEventArgs;
      string[] ss = new string[2];
      ss[0] = "\u0001";
      ss[1] = "\u0001";
      diceEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DiceEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException618()
{
    try
    {
      DiceEventArgs diceEventArgs;
      string[] ss = new string[2];
      ss[0] = "-0";
      ss[1] = "-9";
      diceEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DiceEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException588()
{
    try
    {
      DiceEventArgs diceEventArgs;
      string[] ss = new string[2];
      ss[0] = "";
      ss[1] = "";
      diceEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DiceEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException583()
{
    try
    {
      DiceEventArgs diceEventArgs;
      string[] ss = new string[2];
      ss[0] = "-";
      ss[1] = "-";
      diceEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DiceEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException264()
{
    try
    {
      DiceEventArgs diceEventArgs;
      string[] ss = new string[2];
      diceEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DiceEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException849()
{
    try
    {
      DiceEventArgs diceEventArgs;
      string[] ss = new string[2];
      ss[0] = "-0";
      ss[1] = "-9\0";
      diceEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DiceEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException677()
{
    try
    {
      DiceEventArgs diceEventArgs;
      string[] ss = new string[2];
      ss[0] = ":";
      ss[1] = ":";
      diceEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
