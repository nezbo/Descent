// <copyright file="PotionMarkerTest.Constructor.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Descent.Model.Player.Figure.HeroStuff;
using System.Collections.Generic;
using Descent.Model.Event;
using Descent.Model.Player.Figure.HeroStuff.Moles;
using Descent.Model.Player;
using Descent.Model;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Model.Board.Marker
{
    public partial class PotionMarkerTest
    {
[TestMethod]
[PexGeneratedBy(typeof(PotionMarkerTest))]
public void Constructor426()
{
    List<SurgeAbility> list;
    List<Ability> list1_;
    SEquipment sEquipment;
    PotionMarker potionMarker;
    SurgeAbility[] surgeAbilitys = new SurgeAbility[0];
    list = new List<SurgeAbility>((IEnumerable<SurgeAbility>)surgeAbilitys);
    Ability[] abilitys = new Ability[0];
    list1_ = new List<Ability>((IEnumerable<Ability>)abilitys);
    sEquipment = new SEquipment(0, (string)null, 
                                EquipmentType.Weapon, EAttackType.NONE, EquipmentRarity.Common, 
                                0, list, 0, list1_, (List<Dice>)null);
    potionMarker =
      this.Constructor(0, "\0", (Texture2D)null, 0, (Equipment)sEquipment);
    Assert.IsNotNull((object)potionMarker);
    Assert.AreEqual<int>
        (0, ((global::Descent.Model.Board.Marker.Marker)potionMarker).Id);
    Assert.AreEqual<string>
        ("\0", ((global::Descent.Model.Board.Marker.Marker)potionMarker).Name);
    Assert.IsNull(((global::Descent.Model.Board.Marker.Marker)potionMarker).Texture);
    Assert.AreEqual<int>
        (0, ((global::Descent.Model.Board.Marker.Marker)potionMarker).MovementPoints);
}
[TestMethod]
[PexGeneratedBy(typeof(PotionMarkerTest))]
public void Constructor27()
{
    List<SurgeAbility> list;
    List<Ability> list1_;
    Equipment equipment;
    PotionMarker potionMarker;
    SurgeAbility[] surgeAbilitys = new SurgeAbility[0];
    list = new List<SurgeAbility>((IEnumerable<SurgeAbility>)surgeAbilitys);
    Ability[] abilitys = new Ability[0];
    list1_ = new List<Ability>((IEnumerable<Ability>)abilitys);
    equipment = new Equipment(0, (string)null, 
                              EquipmentType.Weapon, EAttackType.NONE, EquipmentRarity.Common, 
                              0, list, 0, list1_, (List<Dice>)null);
    potionMarker = this.Constructor(0, "\0", (Texture2D)null, 0, equipment);
    Assert.IsNotNull((object)potionMarker);
    Assert.AreEqual<int>
        (0, ((global::Descent.Model.Board.Marker.Marker)potionMarker).Id);
    Assert.AreEqual<string>
        ("\0", ((global::Descent.Model.Board.Marker.Marker)potionMarker).Name);
    Assert.IsNull(((global::Descent.Model.Board.Marker.Marker)potionMarker).Texture);
    Assert.AreEqual<int>
        (0, ((global::Descent.Model.Board.Marker.Marker)potionMarker).MovementPoints);
}
[TestMethod]
[PexGeneratedBy(typeof(PotionMarkerTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException917()
{
    try
    {
      PotionMarker potionMarker;
      potionMarker = this.Constructor(0, "\0", (Texture2D)null, 0, (Equipment)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PotionMarkerTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException385()
{
    try
    {
      PotionMarker potionMarker;
      potionMarker = this.Constructor(0, "", (Texture2D)null, 0, (Equipment)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PotionMarkerTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException172()
{
    try
    {
      PotionMarker potionMarker;
      potionMarker =
        this.Constructor(0, (string)null, (Texture2D)null, 0, (Equipment)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
