// <copyright file="RolledDicesEventArgsTest.PopulateWithArgs.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Messaging.Events
{
    public partial class RolledDicesEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(RolledDicesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException706()
{
    try
    {
      RolledDicesEventArgs rolledDicesEventArgs;
      int[] ints = new int[1];
      rolledDicesEventArgs = new RolledDicesEventArgs(ints);
      ((GameEventArgs)rolledDicesEventArgs).SenderId = 0;
      ((GameEventArgs)rolledDicesEventArgs).EventId = (string)null;
      ((GameEventArgs)rolledDicesEventArgs).EventType = (EventType)0;
      ((GameEventArgs)rolledDicesEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "-0";
      ss[1] = "-\0";
      this.PopulateWithArgs(rolledDicesEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(RolledDicesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException478()
{
    try
    {
      RolledDicesEventArgs rolledDicesEventArgs;
      int[] ints = new int[1];
      rolledDicesEventArgs = new RolledDicesEventArgs(ints);
      ((GameEventArgs)rolledDicesEventArgs).SenderId = 0;
      ((GameEventArgs)rolledDicesEventArgs).EventId = (string)null;
      ((GameEventArgs)rolledDicesEventArgs).EventType = (EventType)0;
      ((GameEventArgs)rolledDicesEventArgs).NeedResponse = false;
      string[] ss = new string[4];
      ss[0] = "-00\0";
      ss[1] = "-";
      ss[2] = "-";
      ss[3] = "-";
      this.PopulateWithArgs(rolledDicesEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(RolledDicesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException842()
{
    try
    {
      RolledDicesEventArgs rolledDicesEventArgs;
      int[] ints = new int[1];
      rolledDicesEventArgs = new RolledDicesEventArgs(ints);
      ((GameEventArgs)rolledDicesEventArgs).SenderId = 0;
      ((GameEventArgs)rolledDicesEventArgs).EventId = (string)null;
      ((GameEventArgs)rolledDicesEventArgs).EventType = (EventType)0;
      ((GameEventArgs)rolledDicesEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "-00\0";
      ss[1] = "";
      this.PopulateWithArgs(rolledDicesEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(RolledDicesEventArgsTest))]
public void PopulateWithArgs288()
{
    RolledDicesEventArgs rolledDicesEventArgs;
    int[] ints = new int[1];
    rolledDicesEventArgs = new RolledDicesEventArgs(ints);
    ((GameEventArgs)rolledDicesEventArgs).SenderId = 0;
    ((GameEventArgs)rolledDicesEventArgs).EventId = (string)null;
    ((GameEventArgs)rolledDicesEventArgs).EventType = (EventType)0;
    ((GameEventArgs)rolledDicesEventArgs).NeedResponse = false;
    string[] ss = new string[2];
    ss[0] = "0";
    ss[1] = "0";
    this.PopulateWithArgs(rolledDicesEventArgs, ss);
    Assert.IsNotNull((object)rolledDicesEventArgs);
    Assert.IsNotNull(rolledDicesEventArgs.RolledSides);
    Assert.AreEqual<int>(2, rolledDicesEventArgs.RolledSides.Length);
    Assert.AreEqual<int>(0, rolledDicesEventArgs.RolledSides[0]);
    Assert.AreEqual<int>(0, rolledDicesEventArgs.RolledSides[1]);
    Assert.AreEqual<int>(0, ((GameEventArgs)rolledDicesEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)rolledDicesEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)rolledDicesEventArgs).EventType);
    Assert.AreEqual<bool>(false, ((GameEventArgs)rolledDicesEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(RolledDicesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException207()
{
    try
    {
      RolledDicesEventArgs rolledDicesEventArgs;
      int[] ints = new int[1];
      rolledDicesEventArgs = new RolledDicesEventArgs(ints);
      ((GameEventArgs)rolledDicesEventArgs).SenderId = 0;
      ((GameEventArgs)rolledDicesEventArgs).EventId = (string)null;
      ((GameEventArgs)rolledDicesEventArgs).EventType = (EventType)0;
      ((GameEventArgs)rolledDicesEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "-0\0";
      ss[1] = "\0";
      this.PopulateWithArgs(rolledDicesEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(RolledDicesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException758()
{
    try
    {
      RolledDicesEventArgs rolledDicesEventArgs;
      int[] ints = new int[1];
      rolledDicesEventArgs = new RolledDicesEventArgs(ints);
      ((GameEventArgs)rolledDicesEventArgs).SenderId = 0;
      ((GameEventArgs)rolledDicesEventArgs).EventId = (string)null;
      ((GameEventArgs)rolledDicesEventArgs).EventType = (EventType)0;
      ((GameEventArgs)rolledDicesEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "-0";
      ss[1] = "\0";
      this.PopulateWithArgs(rolledDicesEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(RolledDicesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException185()
{
    try
    {
      RolledDicesEventArgs rolledDicesEventArgs;
      int[] ints = new int[1];
      rolledDicesEventArgs = new RolledDicesEventArgs(ints);
      ((GameEventArgs)rolledDicesEventArgs).SenderId = 0;
      ((GameEventArgs)rolledDicesEventArgs).EventId = (string)null;
      ((GameEventArgs)rolledDicesEventArgs).EventType = (EventType)0;
      ((GameEventArgs)rolledDicesEventArgs).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = "0:";
      this.PopulateWithArgs(rolledDicesEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(RolledDicesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException882()
{
    try
    {
      RolledDicesEventArgs rolledDicesEventArgs;
      int[] ints = new int[1];
      rolledDicesEventArgs = new RolledDicesEventArgs(ints);
      ((GameEventArgs)rolledDicesEventArgs).SenderId = 0;
      ((GameEventArgs)rolledDicesEventArgs).EventId = (string)null;
      ((GameEventArgs)rolledDicesEventArgs).EventType = (EventType)0;
      ((GameEventArgs)rolledDicesEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "0";
      ss[1] = "-";
      this.PopulateWithArgs(rolledDicesEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(RolledDicesEventArgsTest))]
public void PopulateWithArgs47()
{
    RolledDicesEventArgs rolledDicesEventArgs;
    int[] ints = new int[1];
    rolledDicesEventArgs = new RolledDicesEventArgs(ints);
    ((GameEventArgs)rolledDicesEventArgs).SenderId = 0;
    ((GameEventArgs)rolledDicesEventArgs).EventId = (string)null;
    ((GameEventArgs)rolledDicesEventArgs).EventType = (EventType)0;
    ((GameEventArgs)rolledDicesEventArgs).NeedResponse = false;
    string[] ss = new string[1];
    ss[0] = "0";
    this.PopulateWithArgs(rolledDicesEventArgs, ss);
    Assert.IsNotNull((object)rolledDicesEventArgs);
    Assert.IsNotNull(rolledDicesEventArgs.RolledSides);
    Assert.AreEqual<int>(1, rolledDicesEventArgs.RolledSides.Length);
    Assert.AreEqual<int>(0, rolledDicesEventArgs.RolledSides[0]);
    Assert.AreEqual<int>(0, ((GameEventArgs)rolledDicesEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)rolledDicesEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)rolledDicesEventArgs).EventType);
    Assert.AreEqual<bool>(false, ((GameEventArgs)rolledDicesEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(RolledDicesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException184()
{
    try
    {
      RolledDicesEventArgs rolledDicesEventArgs;
      int[] ints = new int[1];
      rolledDicesEventArgs = new RolledDicesEventArgs(ints);
      ((GameEventArgs)rolledDicesEventArgs).SenderId = 0;
      ((GameEventArgs)rolledDicesEventArgs).EventId = (string)null;
      ((GameEventArgs)rolledDicesEventArgs).EventType = (EventType)0;
      ((GameEventArgs)rolledDicesEventArgs).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = "-\0";
      this.PopulateWithArgs(rolledDicesEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(RolledDicesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException724()
{
    try
    {
      RolledDicesEventArgs rolledDicesEventArgs;
      int[] ints = new int[1];
      rolledDicesEventArgs = new RolledDicesEventArgs(ints);
      ((GameEventArgs)rolledDicesEventArgs).SenderId = 0;
      ((GameEventArgs)rolledDicesEventArgs).EventId = (string)null;
      ((GameEventArgs)rolledDicesEventArgs).EventType = (EventType)0;
      ((GameEventArgs)rolledDicesEventArgs).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = "-";
      this.PopulateWithArgs(rolledDicesEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(RolledDicesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException308()
{
    try
    {
      RolledDicesEventArgs rolledDicesEventArgs;
      int[] ints = new int[1];
      rolledDicesEventArgs = new RolledDicesEventArgs(ints);
      ((GameEventArgs)rolledDicesEventArgs).SenderId = 0;
      ((GameEventArgs)rolledDicesEventArgs).EventId = (string)null;
      ((GameEventArgs)rolledDicesEventArgs).EventType = (EventType)0;
      ((GameEventArgs)rolledDicesEventArgs).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = ":";
      this.PopulateWithArgs(rolledDicesEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(RolledDicesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException795()
{
    try
    {
      RolledDicesEventArgs rolledDicesEventArgs;
      int[] ints = new int[1];
      rolledDicesEventArgs = new RolledDicesEventArgs(ints);
      ((GameEventArgs)rolledDicesEventArgs).SenderId = 0;
      ((GameEventArgs)rolledDicesEventArgs).EventId = (string)null;
      ((GameEventArgs)rolledDicesEventArgs).EventType = (EventType)0;
      ((GameEventArgs)rolledDicesEventArgs).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = "\0";
      this.PopulateWithArgs(rolledDicesEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(RolledDicesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException135()
{
    try
    {
      RolledDicesEventArgs rolledDicesEventArgs;
      int[] ints = new int[1];
      rolledDicesEventArgs = new RolledDicesEventArgs(ints);
      ((GameEventArgs)rolledDicesEventArgs).SenderId = 0;
      ((GameEventArgs)rolledDicesEventArgs).EventId = (string)null;
      ((GameEventArgs)rolledDicesEventArgs).EventType = (EventType)0;
      ((GameEventArgs)rolledDicesEventArgs).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = "";
      this.PopulateWithArgs(rolledDicesEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(RolledDicesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException149()
{
    try
    {
      RolledDicesEventArgs rolledDicesEventArgs;
      int[] ints = new int[1];
      rolledDicesEventArgs = new RolledDicesEventArgs(ints);
      ((GameEventArgs)rolledDicesEventArgs).SenderId = 0;
      ((GameEventArgs)rolledDicesEventArgs).EventId = (string)null;
      ((GameEventArgs)rolledDicesEventArgs).EventType = (EventType)0;
      ((GameEventArgs)rolledDicesEventArgs).NeedResponse = false;
      string[] ss = new string[1];
      this.PopulateWithArgs(rolledDicesEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(RolledDicesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException567()
{
    try
    {
      RolledDicesEventArgs rolledDicesEventArgs;
      int[] ints = new int[1];
      rolledDicesEventArgs = new RolledDicesEventArgs(ints);
      ((GameEventArgs)rolledDicesEventArgs).SenderId = 0;
      ((GameEventArgs)rolledDicesEventArgs).EventId = (string)null;
      ((GameEventArgs)rolledDicesEventArgs).EventType = (EventType)0;
      ((GameEventArgs)rolledDicesEventArgs).NeedResponse = false;
      this.PopulateWithArgs(rolledDicesEventArgs, (string[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
