// <copyright file="PointsEventArgsTest.PopulateWithArgs.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Messaging.Events
{
    public partial class PointsEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(PointsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException568()
{
    try
    {
      PointsEventArgs s0 = new PointsEventArgs(0);
      ((GameEventArgs)s0).SenderId = 0;
      ((GameEventArgs)s0).EventId = (string)null;
      ((GameEventArgs)s0).EventType = (EventType)0;
      ((GameEventArgs)s0).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = "00:";
      this.PopulateWithArgs(s0, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PointsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException421()
{
    try
    {
      PointsEventArgs s0 = new PointsEventArgs(0);
      ((GameEventArgs)s0).SenderId = 0;
      ((GameEventArgs)s0).EventId = (string)null;
      ((GameEventArgs)s0).EventType = (EventType)0;
      ((GameEventArgs)s0).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = "0:";
      this.PopulateWithArgs(s0, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PointsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException155()
{
    try
    {
      PointsEventArgs s0 = new PointsEventArgs(0);
      ((GameEventArgs)s0).SenderId = 0;
      ((GameEventArgs)s0).EventId = (string)null;
      ((GameEventArgs)s0).EventType = (EventType)0;
      ((GameEventArgs)s0).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = "-\0";
      this.PopulateWithArgs(s0, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PointsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException413()
{
    try
    {
      PointsEventArgs s0 = new PointsEventArgs(0);
      ((GameEventArgs)s0).SenderId = 0;
      ((GameEventArgs)s0).EventId = (string)null;
      ((GameEventArgs)s0).EventType = (EventType)0;
      ((GameEventArgs)s0).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = ":";
      this.PopulateWithArgs(s0, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PointsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException419()
{
    try
    {
      PointsEventArgs s0 = new PointsEventArgs(0);
      ((GameEventArgs)s0).SenderId = 0;
      ((GameEventArgs)s0).EventId = (string)null;
      ((GameEventArgs)s0).EventType = (EventType)0;
      ((GameEventArgs)s0).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = "\u0001";
      this.PopulateWithArgs(s0, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PointsEventArgsTest))]
public void PopulateWithArgs574()
{
    PointsEventArgs s0 = new PointsEventArgs(0);
    ((GameEventArgs)s0).SenderId = 0;
    ((GameEventArgs)s0).EventId = (string)null;
    ((GameEventArgs)s0).EventType = (EventType)0;
    ((GameEventArgs)s0).NeedResponse = false;
    string[] ss = new string[1];
    ss[0] = "0";
    this.PopulateWithArgs(s0, ss);
    Assert.IsNotNull((object)s0);
    Assert.AreEqual<int>(0, s0.Points);
    Assert.AreEqual<int>(0, ((GameEventArgs)s0).SenderId);
    Assert.AreEqual<string>((string)null, ((GameEventArgs)s0).EventId);
    Assert.AreEqual<EventType>((EventType)0, ((GameEventArgs)s0).EventType);
    Assert.AreEqual<bool>(false, ((GameEventArgs)s0).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(PointsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException685()
{
    try
    {
      PointsEventArgs s0 = new PointsEventArgs(0);
      ((GameEventArgs)s0).SenderId = 0;
      ((GameEventArgs)s0).EventId = (string)null;
      ((GameEventArgs)s0).EventType = (EventType)0;
      ((GameEventArgs)s0).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = "-";
      this.PopulateWithArgs(s0, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PointsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException966()
{
    try
    {
      PointsEventArgs s0 = new PointsEventArgs(0);
      ((GameEventArgs)s0).SenderId = 0;
      ((GameEventArgs)s0).EventId = (string)null;
      ((GameEventArgs)s0).EventType = (EventType)0;
      ((GameEventArgs)s0).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = "\0";
      this.PopulateWithArgs(s0, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PointsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException278()
{
    try
    {
      PointsEventArgs s0 = new PointsEventArgs(0);
      ((GameEventArgs)s0).SenderId = 0;
      ((GameEventArgs)s0).EventId = (string)null;
      ((GameEventArgs)s0).EventType = (EventType)0;
      ((GameEventArgs)s0).NeedResponse = false;
      string[] ss = new string[1];
      ss[0] = "";
      this.PopulateWithArgs(s0, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PointsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException118()
{
    try
    {
      PointsEventArgs s0 = new PointsEventArgs(0);
      ((GameEventArgs)s0).SenderId = 0;
      ((GameEventArgs)s0).EventId = (string)null;
      ((GameEventArgs)s0).EventType = (EventType)0;
      ((GameEventArgs)s0).NeedResponse = false;
      string[] ss = new string[1];
      this.PopulateWithArgs(s0, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PointsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException17()
{
    try
    {
      PointsEventArgs s0 = new PointsEventArgs(0);
      ((GameEventArgs)s0).SenderId = 0;
      ((GameEventArgs)s0).EventId = (string)null;
      ((GameEventArgs)s0).EventType = (EventType)0;
      ((GameEventArgs)s0).NeedResponse = false;
      string[] ss = new string[0];
      this.PopulateWithArgs(s0, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PointsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException220()
{
    try
    {
      PointsEventArgs s0 = new PointsEventArgs(0);
      ((GameEventArgs)s0).SenderId = 0;
      ((GameEventArgs)s0).EventId = (string)null;
      ((GameEventArgs)s0).EventType = (EventType)0;
      ((GameEventArgs)s0).NeedResponse = false;
      this.PopulateWithArgs(s0, (string[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
