// <copyright file="GiveCoinsEventArgsTest.PopulateWithArgs.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Messaging.Events
{
    public partial class GiveCoinsEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(GiveCoinsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException39()
{
    try
    {
      GiveCoinsEventArgs giveCoinsEventArgs;
      giveCoinsEventArgs = new GiveCoinsEventArgs(1, 1);
      ((GameEventArgs)giveCoinsEventArgs).SenderId = 0;
      ((GameEventArgs)giveCoinsEventArgs).EventId = (string)null;
      ((GameEventArgs)giveCoinsEventArgs).EventType = (EventType)0;
      ((GameEventArgs)giveCoinsEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "-0";
      ss[1] = "-0";
      this.PopulateWithArgs(giveCoinsEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveCoinsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException389()
{
    try
    {
      GiveCoinsEventArgs giveCoinsEventArgs;
      giveCoinsEventArgs = new GiveCoinsEventArgs(1, 1);
      ((GameEventArgs)giveCoinsEventArgs).SenderId = 0;
      ((GameEventArgs)giveCoinsEventArgs).EventId = (string)null;
      ((GameEventArgs)giveCoinsEventArgs).EventType = (EventType)0;
      ((GameEventArgs)giveCoinsEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "-\0";
      ss[1] = "-\0";
      this.PopulateWithArgs(giveCoinsEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveCoinsEventArgsTest))]
public void PopulateWithArgs379()
{
    GiveCoinsEventArgs giveCoinsEventArgs;
    giveCoinsEventArgs = new GiveCoinsEventArgs(1, 1);
    ((GameEventArgs)giveCoinsEventArgs).SenderId = 0;
    ((GameEventArgs)giveCoinsEventArgs).EventId = (string)null;
    ((GameEventArgs)giveCoinsEventArgs).EventType = (EventType)0;
    ((GameEventArgs)giveCoinsEventArgs).NeedResponse = false;
    string[] ss = new string[2];
    ss[0] = "1";
    ss[1] = "1";
    this.PopulateWithArgs(giveCoinsEventArgs, ss);
    Assert.IsNotNull((object)giveCoinsEventArgs);
    Assert.AreEqual<int>(1, giveCoinsEventArgs.PlayerId);
    Assert.AreEqual<int>(1, giveCoinsEventArgs.NumberOfCoins);
    Assert.AreEqual<int>(0, ((GameEventArgs)giveCoinsEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)giveCoinsEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)giveCoinsEventArgs).EventType);
    Assert.AreEqual<bool>(false, ((GameEventArgs)giveCoinsEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(GiveCoinsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException156()
{
    try
    {
      GiveCoinsEventArgs giveCoinsEventArgs;
      giveCoinsEventArgs = new GiveCoinsEventArgs(1, 1);
      ((GameEventArgs)giveCoinsEventArgs).SenderId = 0;
      ((GameEventArgs)giveCoinsEventArgs).EventId = (string)null;
      ((GameEventArgs)giveCoinsEventArgs).EventType = (EventType)0;
      ((GameEventArgs)giveCoinsEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "0\0";
      ss[1] = "0\0";
      this.PopulateWithArgs(giveCoinsEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveCoinsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException433()
{
    try
    {
      GiveCoinsEventArgs giveCoinsEventArgs;
      giveCoinsEventArgs = new GiveCoinsEventArgs(1, 1);
      ((GameEventArgs)giveCoinsEventArgs).SenderId = 0;
      ((GameEventArgs)giveCoinsEventArgs).EventId = (string)null;
      ((GameEventArgs)giveCoinsEventArgs).EventType = (EventType)0;
      ((GameEventArgs)giveCoinsEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = ":";
      ss[1] = ":";
      this.PopulateWithArgs(giveCoinsEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveCoinsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException196()
{
    try
    {
      GiveCoinsEventArgs giveCoinsEventArgs;
      giveCoinsEventArgs = new GiveCoinsEventArgs(1, 1);
      ((GameEventArgs)giveCoinsEventArgs).SenderId = 0;
      ((GameEventArgs)giveCoinsEventArgs).EventId = (string)null;
      ((GameEventArgs)giveCoinsEventArgs).EventType = (EventType)0;
      ((GameEventArgs)giveCoinsEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "0";
      ss[1] = "0";
      this.PopulateWithArgs(giveCoinsEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveCoinsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException241()
{
    try
    {
      GiveCoinsEventArgs giveCoinsEventArgs;
      giveCoinsEventArgs = new GiveCoinsEventArgs(1, 1);
      ((GameEventArgs)giveCoinsEventArgs).SenderId = 0;
      ((GameEventArgs)giveCoinsEventArgs).EventId = (string)null;
      ((GameEventArgs)giveCoinsEventArgs).EventType = (EventType)0;
      ((GameEventArgs)giveCoinsEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "-";
      ss[1] = "-";
      this.PopulateWithArgs(giveCoinsEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveCoinsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException359()
{
    try
    {
      GiveCoinsEventArgs giveCoinsEventArgs;
      giveCoinsEventArgs = new GiveCoinsEventArgs(1, 1);
      ((GameEventArgs)giveCoinsEventArgs).SenderId = 0;
      ((GameEventArgs)giveCoinsEventArgs).EventId = (string)null;
      ((GameEventArgs)giveCoinsEventArgs).EventType = (EventType)0;
      ((GameEventArgs)giveCoinsEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "\u0001\0";
      ss[1] = "\u0001\0";
      this.PopulateWithArgs(giveCoinsEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveCoinsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException929()
{
    try
    {
      GiveCoinsEventArgs giveCoinsEventArgs;
      giveCoinsEventArgs = new GiveCoinsEventArgs(1, 1);
      ((GameEventArgs)giveCoinsEventArgs).SenderId = 0;
      ((GameEventArgs)giveCoinsEventArgs).EventId = (string)null;
      ((GameEventArgs)giveCoinsEventArgs).EventType = (EventType)0;
      ((GameEventArgs)giveCoinsEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "\0";
      ss[1] = "\0";
      this.PopulateWithArgs(giveCoinsEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveCoinsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException738()
{
    try
    {
      GiveCoinsEventArgs giveCoinsEventArgs;
      giveCoinsEventArgs = new GiveCoinsEventArgs(1, 1);
      ((GameEventArgs)giveCoinsEventArgs).SenderId = 0;
      ((GameEventArgs)giveCoinsEventArgs).EventId = (string)null;
      ((GameEventArgs)giveCoinsEventArgs).EventType = (EventType)0;
      ((GameEventArgs)giveCoinsEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "";
      ss[1] = "";
      this.PopulateWithArgs(giveCoinsEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveCoinsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException907()
{
    try
    {
      GiveCoinsEventArgs giveCoinsEventArgs;
      giveCoinsEventArgs = new GiveCoinsEventArgs(1, 1);
      ((GameEventArgs)giveCoinsEventArgs).SenderId = 0;
      ((GameEventArgs)giveCoinsEventArgs).EventId = (string)null;
      ((GameEventArgs)giveCoinsEventArgs).EventType = (EventType)0;
      ((GameEventArgs)giveCoinsEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      this.PopulateWithArgs(giveCoinsEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveCoinsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException512()
{
    try
    {
      GiveCoinsEventArgs giveCoinsEventArgs;
      giveCoinsEventArgs = new GiveCoinsEventArgs(1, 1);
      ((GameEventArgs)giveCoinsEventArgs).SenderId = 0;
      ((GameEventArgs)giveCoinsEventArgs).EventId = (string)null;
      ((GameEventArgs)giveCoinsEventArgs).EventType = (EventType)0;
      ((GameEventArgs)giveCoinsEventArgs).NeedResponse = false;
      string[] ss = new string[0];
      this.PopulateWithArgs(giveCoinsEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveCoinsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException()
{
    try
    {
      GiveCoinsEventArgs giveCoinsEventArgs;
      giveCoinsEventArgs = new GiveCoinsEventArgs(1, 1);
      ((GameEventArgs)giveCoinsEventArgs).SenderId = 0;
      ((GameEventArgs)giveCoinsEventArgs).EventId = (string)null;
      ((GameEventArgs)giveCoinsEventArgs).EventType = (EventType)0;
      ((GameEventArgs)giveCoinsEventArgs).NeedResponse = false;
      this.PopulateWithArgs(giveCoinsEventArgs, (string[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
