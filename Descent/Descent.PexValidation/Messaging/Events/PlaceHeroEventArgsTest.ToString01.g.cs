// <copyright file="PlaceHeroEventArgsTest.ToString01.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace Descent.Messaging.Events
{
    public partial class PlaceHeroEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(PlaceHeroEventArgsTest))]
public void ToString01246()
{
    PlaceHeroEventArgs placeHeroEventArgs;
    string s;
    placeHeroEventArgs = new PlaceHeroEventArgs(1, 8, 0);
    ((GameEventArgs)placeHeroEventArgs).SenderId = 0;
    ((GameEventArgs)placeHeroEventArgs).EventId = (string)null;
    ((GameEventArgs)placeHeroEventArgs).EventType = (EventType)0;
    ((GameEventArgs)placeHeroEventArgs).NeedResponse = false;
    s = this.ToString01(placeHeroEventArgs);
    Assert.AreEqual<string>("1,8,0", s);
    Assert.IsNotNull((object)placeHeroEventArgs);
    Assert.AreEqual<int>(1, placeHeroEventArgs.PlayerId);
    Assert.AreEqual<int>(8, placeHeroEventArgs.X);
    Assert.AreEqual<int>(0, placeHeroEventArgs.Y);
    Assert.AreEqual<int>(0, ((GameEventArgs)placeHeroEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)placeHeroEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)placeHeroEventArgs).EventType);
    Assert.AreEqual<bool>(false, ((GameEventArgs)placeHeroEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(PlaceHeroEventArgsTest))]
public void ToString0154()
{
    PlaceHeroEventArgs placeHeroEventArgs;
    string s;
    placeHeroEventArgs = new PlaceHeroEventArgs(1, 0, 0);
    ((GameEventArgs)placeHeroEventArgs).SenderId = 0;
    ((GameEventArgs)placeHeroEventArgs).EventId = (string)null;
    ((GameEventArgs)placeHeroEventArgs).EventType = (EventType)0;
    ((GameEventArgs)placeHeroEventArgs).NeedResponse = false;
    s = this.ToString01(placeHeroEventArgs);
    Assert.AreEqual<string>("1,0,0", s);
    Assert.IsNotNull((object)placeHeroEventArgs);
    Assert.AreEqual<int>(1, placeHeroEventArgs.PlayerId);
    Assert.AreEqual<int>(0, placeHeroEventArgs.X);
    Assert.AreEqual<int>(0, placeHeroEventArgs.Y);
    Assert.AreEqual<int>(0, ((GameEventArgs)placeHeroEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)placeHeroEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)placeHeroEventArgs).EventType);
    Assert.AreEqual<bool>(false, ((GameEventArgs)placeHeroEventArgs).NeedResponse);
}
    }
}
