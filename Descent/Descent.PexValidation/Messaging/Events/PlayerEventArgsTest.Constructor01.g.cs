// <copyright file="PlayerEventArgsTest.Constructor01.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Messaging.Events
{
    public partial class PlayerEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException303()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      string[] ss = new string[1];
      ss[0] = "00:";
      playerEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException968()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      string[] ss = new string[1];
      ss[0] = "-0:";
      playerEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException316()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      string[] ss = new string[1];
      ss[0] = "-\0";
      playerEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException87201()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      string[] ss = new string[1];
      ss[0] = ":";
      playerEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException70()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      string[] ss = new string[1];
      ss[0] = "-";
      playerEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
public void Constructor01493()
{
    PlayerEventArgs playerEventArgs;
    string[] ss = new string[1];
    ss[0] = "0";
    playerEventArgs = this.Constructor01(ss);
    Assert.IsNotNull((object)playerEventArgs);
    Assert.AreEqual<int>(0, playerEventArgs.PlayerId);
    Assert.AreEqual<int>(0, ((GameEventArgs)playerEventArgs).SenderId);
    Assert.AreEqual<string>((string)null, ((GameEventArgs)playerEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)playerEventArgs).EventType);
    Assert.AreEqual<bool>(false, ((GameEventArgs)playerEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException872()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      string[] ss = new string[1];
      ss[0] = "\u0001";
      playerEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException429()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      string[] ss = new string[1];
      ss[0] = "\0";
      playerEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException332()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      string[] ss = new string[1];
      ss[0] = "";
      playerEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException457()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      string[] ss = new string[1];
      playerEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException97()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      string[] ss = new string[0];
      playerEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException670()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      playerEventArgs = this.Constructor01((string[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
public void Constructor115()
{
    PlayerEventArgs playerEventArgs;
    playerEventArgs = this.Constructor(1);
    Assert.IsNotNull((object)playerEventArgs);
    Assert.AreEqual<int>(1, playerEventArgs.PlayerId);
    Assert.AreEqual<int>(0, ((GameEventArgs)playerEventArgs).SenderId);
    Assert.AreEqual<string>((string)null, ((GameEventArgs)playerEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)playerEventArgs).EventType);
    Assert.AreEqual<bool>(false, ((GameEventArgs)playerEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException235()
{
    try
    {
      PlayerEventArgs playerEventArgs;
      playerEventArgs = this.Constructor(0);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
