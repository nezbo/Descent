// <copyright file="TokenEventArgsTest.Constructor01.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Messaging.Events
{
    public partial class TokenEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(TokenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException650()
{
    try
    {
      TokenEventArgs tokenEventArgs;
      string[] ss = new string[1];
      ss[0] = "00:";
      tokenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TokenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException57()
{
    try
    {
      TokenEventArgs tokenEventArgs;
      string[] ss = new string[1];
      ss[0] = "-0:";
      tokenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TokenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException621()
{
    try
    {
      TokenEventArgs tokenEventArgs;
      string[] ss = new string[1];
      ss[0] = "-\0";
      tokenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TokenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException317()
{
    try
    {
      TokenEventArgs tokenEventArgs;
      string[] ss = new string[1];
      ss[0] = ":";
      tokenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TokenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException699()
{
    try
    {
      TokenEventArgs tokenEventArgs;
      string[] ss = new string[1];
      ss[0] = "-";
      tokenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TokenEventArgsTest))]
public void Constructor01644()
{
    TokenEventArgs tokenEventArgs;
    string[] ss = new string[1];
    ss[0] = "0";
    tokenEventArgs = this.Constructor01(ss);
    Assert.IsNotNull((object)tokenEventArgs);
    Assert.AreEqual<int>(0, tokenEventArgs.NumberOfTokens);
    Assert.AreEqual<int>(0, ((GameEventArgs)tokenEventArgs).SenderId);
    Assert.AreEqual<string>((string)null, ((GameEventArgs)tokenEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)tokenEventArgs).EventType);
    Assert.AreEqual<bool>(false, ((GameEventArgs)tokenEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(TokenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException987()
{
    try
    {
      TokenEventArgs tokenEventArgs;
      string[] ss = new string[1];
      ss[0] = "\u0001";
      tokenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TokenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException262()
{
    try
    {
      TokenEventArgs tokenEventArgs;
      string[] ss = new string[1];
      ss[0] = "\0";
      tokenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TokenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException903()
{
    try
    {
      TokenEventArgs tokenEventArgs;
      string[] ss = new string[1];
      ss[0] = "";
      tokenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TokenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException126()
{
    try
    {
      TokenEventArgs tokenEventArgs;
      string[] ss = new string[1];
      tokenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TokenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException196()
{
    try
    {
      TokenEventArgs tokenEventArgs;
      string[] ss = new string[0];
      tokenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TokenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException361()
{
    try
    {
      TokenEventArgs tokenEventArgs;
      tokenEventArgs = this.Constructor01((string[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(TokenEventArgsTest))]
public void Constructor182()
{
    TokenEventArgs tokenEventArgs;
    tokenEventArgs = this.Constructor(1);
    Assert.IsNotNull((object)tokenEventArgs);
    Assert.AreEqual<int>(1, tokenEventArgs.NumberOfTokens);
    Assert.AreEqual<int>(0, ((GameEventArgs)tokenEventArgs).SenderId);
    Assert.AreEqual<string>((string)null, ((GameEventArgs)tokenEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)tokenEventArgs).EventType);
    Assert.AreEqual<bool>(false, ((GameEventArgs)tokenEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(TokenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException567()
{
    try
    {
      TokenEventArgs tokenEventArgs;
      tokenEventArgs = this.Constructor(0);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
