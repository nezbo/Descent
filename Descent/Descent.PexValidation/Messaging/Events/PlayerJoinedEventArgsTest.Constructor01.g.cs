// <copyright file="PlayerJoinedEventArgsTest.Constructor01.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Messaging.Events
{
    public partial class PlayerJoinedEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
public void Constructor01318()
{
    PlayerJoinedEventArgs playerJoinedEventArgs;
    string[] ss = new string[2];
    ss[0] = "1";
    ss[1] = "1";
    playerJoinedEventArgs = this.Constructor01(ss);
    Assert.IsNotNull((object)playerJoinedEventArgs);
    Assert.AreEqual<int>(1, playerJoinedEventArgs.PlayerId);
    Assert.AreEqual<string>("1", playerJoinedEventArgs.PlayerNick);
    Assert.AreEqual<int>(0, ((GameEventArgs)playerJoinedEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)playerJoinedEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)playerJoinedEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)playerJoinedEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException994()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      string[] ss = new string[2];
      ss[0] = "-0";
      ss[1] = "-0";
      playerJoinedEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException549()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      string[] ss = new string[2];
      ss[0] = "-\0";
      ss[1] = "-\0";
      playerJoinedEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException578()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      string[] ss = new string[2];
      ss[0] = "0\0";
      ss[1] = "0\0";
      playerJoinedEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException888()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      string[] ss = new string[2];
      ss[0] = ":";
      ss[1] = ":";
      playerJoinedEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException993()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      string[] ss = new string[2];
      ss[0] = "-";
      ss[1] = "-";
      playerJoinedEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException887()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      string[] ss = new string[2];
      ss[0] = "0";
      ss[1] = "0";
      playerJoinedEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException799()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      string[] ss = new string[2];
      ss[0] = "\u0001";
      ss[1] = "\u0001";
      playerJoinedEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException744()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      string[] ss = new string[2];
      ss[0] = "\0\0";
      ss[1] = "\0\0";
      playerJoinedEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException368()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      string[] ss = new string[2];
      ss[0] = "";
      ss[1] = "";
      playerJoinedEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException666()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      string[] ss = new string[2];
      playerJoinedEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException551()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      string[] ss = new string[0];
      playerJoinedEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException434()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      playerJoinedEventArgs = this.Constructor01((string[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
public void Constructor323()
{
    PlayerJoinedEventArgs playerJoinedEventArgs;
    playerJoinedEventArgs = this.Constructor(1, "");
    Assert.IsNotNull((object)playerJoinedEventArgs);
    Assert.AreEqual<int>(1, playerJoinedEventArgs.PlayerId);
    Assert.AreEqual<string>("", playerJoinedEventArgs.PlayerNick);
    Assert.AreEqual<int>(0, ((GameEventArgs)playerJoinedEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)playerJoinedEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)playerJoinedEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)playerJoinedEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException274()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      playerJoinedEventArgs = this.Constructor(1, (string)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException682()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      playerJoinedEventArgs = this.Constructor(0, (string)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
