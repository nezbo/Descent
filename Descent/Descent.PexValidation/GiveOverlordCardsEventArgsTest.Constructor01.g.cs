// <copyright file="GiveOverlordCardsEventArgsTest.Constructor01.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Messaging.Events
{
    public partial class GiveOverlordCardsEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException405()
{
    try
    {
      GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
      string[] ss = new string[10];
      ss[0] = "1\0";
      ss[1] = "1\0";
      ss[2] = "1\0";
      ss[3] = "1\0";
      ss[4] = "1\0";
      ss[5] = "1\0";
      ss[6] = "1\0";
      ss[7] = "1\0";
      ss[8] = "1\0";
      ss[9] = "1\0";
      giveOverlordCardsEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException82801()
{
    try
    {
      GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
      string[] ss = new string[6];
      ss[0] = "1\0";
      ss[1] = "1\0";
      ss[2] = "1\0";
      ss[3] = "1\0";
      ss[4] = "1\0";
      ss[5] = "1\0";
      giveOverlordCardsEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException517()
{
    try
    {
      GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
      string[] ss = new string[5];
      ss[0] = "1\0";
      ss[1] = "1\0";
      ss[2] = "1\0";
      ss[3] = "1\0";
      ss[4] = "1\0";
      giveOverlordCardsEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
public void Constructor01380()
{
    GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
    string[] ss = new string[3];
    ss[0] = "2";
    ss[1] = "1";
    ss[2] = "1";
    giveOverlordCardsEventArgs = this.Constructor01(ss);
    Assert.IsNotNull((object)giveOverlordCardsEventArgs);
    Assert.IsNotNull(giveOverlordCardsEventArgs.OverlordCardIds);
    Assert.AreEqual<int>(2, giveOverlordCardsEventArgs.OverlordCardIds.Length);
    Assert.AreEqual<int>(1, giveOverlordCardsEventArgs.OverlordCardIds[0]);
    Assert.AreEqual<int>(1, giveOverlordCardsEventArgs.OverlordCardIds[1]);
    Assert.AreEqual<int>(0, ((GameEventArgs)giveOverlordCardsEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)giveOverlordCardsEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)giveOverlordCardsEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)giveOverlordCardsEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
public void Constructor01643()
{
    GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
    string[] ss = new string[2];
    ss[0] = "1";
    ss[1] = "1";
    giveOverlordCardsEventArgs = this.Constructor01(ss);
    Assert.IsNotNull((object)giveOverlordCardsEventArgs);
    Assert.IsNotNull(giveOverlordCardsEventArgs.OverlordCardIds);
    Assert.AreEqual<int>(1, giveOverlordCardsEventArgs.OverlordCardIds.Length);
    Assert.AreEqual<int>(1, giveOverlordCardsEventArgs.OverlordCardIds[0]);
    Assert.AreEqual<int>(0, ((GameEventArgs)giveOverlordCardsEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)giveOverlordCardsEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)giveOverlordCardsEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)giveOverlordCardsEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException214()
{
    try
    {
      GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
      string[] ss = new string[2];
      ss[0] = "-0";
      ss[1] = "-0";
      giveOverlordCardsEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException630()
{
    try
    {
      GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
      string[] ss = new string[3];
      ss[0] = "1";
      ss[1] = "1";
      ss[2] = "1";
      giveOverlordCardsEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException716()
{
    try
    {
      GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
      string[] ss = new string[2];
      ss[0] = "-\0";
      ss[1] = "-\0";
      giveOverlordCardsEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException828()
{
    try
    {
      GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
      string[] ss = new string[2];
      ss[0] = "0\0";
      ss[1] = "0\0";
      giveOverlordCardsEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException429()
{
    try
    {
      GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
      string[] ss = new string[2];
      ss[0] = "-";
      ss[1] = "-";
      giveOverlordCardsEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException547()
{
    try
    {
      GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
      string[] ss = new string[2];
      ss[0] = ":";
      ss[1] = ":";
      giveOverlordCardsEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException959()
{
    try
    {
      GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
      string[] ss = new string[2];
      ss[0] = "0";
      ss[1] = "0";
      giveOverlordCardsEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException282()
{
    try
    {
      GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
      string[] ss = new string[2];
      ss[0] = "\u0001\0";
      ss[1] = "\u0001\0";
      giveOverlordCardsEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException36()
{
    try
    {
      GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
      string[] ss = new string[2];
      ss[0] = "\0";
      ss[1] = "\0";
      giveOverlordCardsEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException148()
{
    try
    {
      GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
      string[] ss = new string[2];
      ss[0] = "";
      ss[1] = "";
      giveOverlordCardsEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException224()
{
    try
    {
      GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
      string[] ss = new string[2];
      giveOverlordCardsEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException65()
{
    try
    {
      GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
      string[] ss = new string[0];
      giveOverlordCardsEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException495()
{
    try
    {
      GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
      giveOverlordCardsEventArgs = this.Constructor01((string[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
public void Constructor523()
{
    GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
    int[] ints = new int[1];
    giveOverlordCardsEventArgs = this.Constructor(ints);
    Assert.IsNotNull((object)giveOverlordCardsEventArgs);
    Assert.IsNotNull(giveOverlordCardsEventArgs.OverlordCardIds);
    Assert.AreEqual<int>(1, giveOverlordCardsEventArgs.OverlordCardIds.Length);
    Assert.AreEqual<int>(0, giveOverlordCardsEventArgs.OverlordCardIds[0]);
    Assert.AreEqual<int>(0, ((GameEventArgs)giveOverlordCardsEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)giveOverlordCardsEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)giveOverlordCardsEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)giveOverlordCardsEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException126()
{
    try
    {
      GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
      int[] ints = new int[0];
      giveOverlordCardsEventArgs = this.Constructor(ints);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveOverlordCardsEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException748()
{
    try
    {
      GiveOverlordCardsEventArgs giveOverlordCardsEventArgs;
      giveOverlordCardsEventArgs = this.Constructor((int[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
