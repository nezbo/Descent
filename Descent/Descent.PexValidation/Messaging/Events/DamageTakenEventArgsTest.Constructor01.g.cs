// <copyright file="DamageTakenEventArgsTest.Constructor01.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Messaging.Events
{
    public partial class DamageTakenEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(DamageTakenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException273()
{
    try
    {
      DamageTakenEventArgs damageTakenEventArgs;
      string[] ss = new string[3];
      ss[0] = "-0\0";
      ss[1] = "-0\0";
      ss[2] = "\0";
      damageTakenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DamageTakenEventArgsTest))]
public void Constructor01128()
{
    DamageTakenEventArgs damageTakenEventArgs;
    string[] ss = new string[3];
    ss[0] = "0";
    ss[1] = "0";
    ss[2] = "0";
    damageTakenEventArgs = this.Constructor01(ss);
    Assert.IsNotNull((object)damageTakenEventArgs);
    Assert.AreEqual<int>(0, damageTakenEventArgs.X);
    Assert.AreEqual<int>(0, damageTakenEventArgs.Y);
    Assert.AreEqual<int>(0, damageTakenEventArgs.Damage);
    Assert.AreEqual<int>(0, ((GameEventArgs)damageTakenEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)damageTakenEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)damageTakenEventArgs).EventType);
    Assert.AreEqual<bool>(false, ((GameEventArgs)damageTakenEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(DamageTakenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException215()
{
    try
    {
      DamageTakenEventArgs damageTakenEventArgs;
      string[] ss = new string[3];
      ss[0] = "-9";
      ss[1] = "-9";
      ss[2] = "-9";
      damageTakenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DamageTakenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException31()
{
    try
    {
      DamageTakenEventArgs damageTakenEventArgs;
      string[] ss = new string[3];
      ss[0] = "-\0";
      ss[1] = "-\0";
      ss[2] = "-\0";
      damageTakenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DamageTakenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException54()
{
    try
    {
      DamageTakenEventArgs damageTakenEventArgs;
      string[] ss = new string[3];
      ss[0] = ":";
      ss[1] = ":";
      ss[2] = ":";
      damageTakenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DamageTakenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException792()
{
    try
    {
      DamageTakenEventArgs damageTakenEventArgs;
      string[] ss = new string[3];
      ss[0] = "-";
      ss[1] = "-";
      ss[2] = "-";
      damageTakenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DamageTakenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException854()
{
    try
    {
      DamageTakenEventArgs damageTakenEventArgs;
      string[] ss = new string[3];
      ss[0] = "\u0001";
      ss[1] = "\u0001";
      ss[2] = "\u0001";
      damageTakenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DamageTakenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException8()
{
    try
    {
      DamageTakenEventArgs damageTakenEventArgs;
      string[] ss = new string[3];
      ss[0] = "\0\0";
      ss[1] = "\0\0";
      ss[2] = "\0\0";
      damageTakenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DamageTakenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException159()
{
    try
    {
      DamageTakenEventArgs damageTakenEventArgs;
      string[] ss = new string[3];
      ss[0] = "";
      ss[1] = "";
      ss[2] = "";
      damageTakenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DamageTakenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException703()
{
    try
    {
      DamageTakenEventArgs damageTakenEventArgs;
      string[] ss = new string[3];
      damageTakenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DamageTakenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException198()
{
    try
    {
      DamageTakenEventArgs damageTakenEventArgs;
      string[] ss = new string[0];
      damageTakenEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DamageTakenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException749()
{
    try
    {
      DamageTakenEventArgs damageTakenEventArgs;
      damageTakenEventArgs = this.Constructor01((string[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DamageTakenEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException137()
{
    try
    {
      DamageTakenEventArgs damageTakenEventArgs;
      damageTakenEventArgs = this.Constructor(int.MinValue, 0, 0);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DamageTakenEventArgsTest))]
public void Constructor687()
{
    DamageTakenEventArgs damageTakenEventArgs;
    damageTakenEventArgs = this.Constructor(0, 0, 0);
    Assert.IsNotNull((object)damageTakenEventArgs);
    Assert.AreEqual<int>(0, damageTakenEventArgs.X);
    Assert.AreEqual<int>(0, damageTakenEventArgs.Y);
    Assert.AreEqual<int>(0, damageTakenEventArgs.Damage);
    Assert.AreEqual<int>(0, ((GameEventArgs)damageTakenEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)damageTakenEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)damageTakenEventArgs).EventType);
    Assert.AreEqual<bool>(false, ((GameEventArgs)damageTakenEventArgs).NeedResponse);
}
    }
}
