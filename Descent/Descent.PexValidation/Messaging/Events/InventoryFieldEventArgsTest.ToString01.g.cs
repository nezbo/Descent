// <copyright file="InventoryFieldEventArgsTest.ToString01.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace Descent.Messaging.Events
{
    public partial class InventoryFieldEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(InventoryFieldEventArgsTest))]
public void ToString01400()
{
    InventoryFieldEventArgs inventoryFieldEventArgs;
    string s;
    inventoryFieldEventArgs = new InventoryFieldEventArgs(1);
    inventoryFieldEventArgs.EquipmentId = 0;
    ((GameEventArgs)inventoryFieldEventArgs).SenderId = 0;
    ((GameEventArgs)inventoryFieldEventArgs).EventId = (string)null;
    ((GameEventArgs)inventoryFieldEventArgs).EventType = (EventType)0;
    ((GameEventArgs)inventoryFieldEventArgs).NeedResponse = false;
    s = this.ToString01(inventoryFieldEventArgs);
    Assert.AreEqual<string>("1", s);
    Assert.IsNotNull((object)inventoryFieldEventArgs);
    Assert.AreEqual<int>(0, inventoryFieldEventArgs.EquipmentId);
    Assert.AreEqual<int>(1, inventoryFieldEventArgs.InventoryField);
    Assert.AreEqual<int>(0, ((GameEventArgs)inventoryFieldEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)inventoryFieldEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)inventoryFieldEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)inventoryFieldEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(InventoryFieldEventArgsTest))]
public void ToString01139()
{
    InventoryFieldEventArgs inventoryFieldEventArgs;
    string s;
    inventoryFieldEventArgs = new InventoryFieldEventArgs(0);
    inventoryFieldEventArgs.EquipmentId = 0;
    ((GameEventArgs)inventoryFieldEventArgs).SenderId = 0;
    ((GameEventArgs)inventoryFieldEventArgs).EventId = (string)null;
    ((GameEventArgs)inventoryFieldEventArgs).EventType = (EventType)0;
    ((GameEventArgs)inventoryFieldEventArgs).NeedResponse = false;
    s = this.ToString01(inventoryFieldEventArgs);
    Assert.AreEqual<string>("0", s);
    Assert.IsNotNull((object)inventoryFieldEventArgs);
    Assert.AreEqual<int>(0, inventoryFieldEventArgs.EquipmentId);
    Assert.AreEqual<int>(0, inventoryFieldEventArgs.InventoryField);
    Assert.AreEqual<int>(0, ((GameEventArgs)inventoryFieldEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)inventoryFieldEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)inventoryFieldEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)inventoryFieldEventArgs).NeedResponse);
}
    }
}
