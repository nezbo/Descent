// <copyright file="PlayerJoinedEventArgsTest.PopulateWithArgs.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Messaging.Events
{
    public partial class PlayerJoinedEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
public void PopulateWithArgs248()
{
    PlayerJoinedEventArgs playerJoinedEventArgs;
    playerJoinedEventArgs = new PlayerJoinedEventArgs(1, "1");
    ((GameEventArgs)playerJoinedEventArgs).SenderId = 0;
    ((GameEventArgs)playerJoinedEventArgs).EventId = (string)null;
    ((GameEventArgs)playerJoinedEventArgs).EventType = (EventType)0;
    ((GameEventArgs)playerJoinedEventArgs).NeedResponse = false;
    string[] ss = new string[2];
    ss[0] = "1";
    ss[1] = "1";
    this.PopulateWithArgs(playerJoinedEventArgs, ss);
    Assert.IsNotNull((object)playerJoinedEventArgs);
    Assert.AreEqual<int>(1, playerJoinedEventArgs.PlayerId);
    Assert.AreEqual<string>("1", playerJoinedEventArgs.PlayerNick);
    Assert.AreEqual<int>(0, ((GameEventArgs)playerJoinedEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)playerJoinedEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)playerJoinedEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)playerJoinedEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException23()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      playerJoinedEventArgs = new PlayerJoinedEventArgs(1, "-0");
      ((GameEventArgs)playerJoinedEventArgs).SenderId = 0;
      ((GameEventArgs)playerJoinedEventArgs).EventId = (string)null;
      ((GameEventArgs)playerJoinedEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerJoinedEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "-0";
      ss[1] = "-0";
      this.PopulateWithArgs(playerJoinedEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException721()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      playerJoinedEventArgs = new PlayerJoinedEventArgs(1, "-\0");
      ((GameEventArgs)playerJoinedEventArgs).SenderId = 0;
      ((GameEventArgs)playerJoinedEventArgs).EventId = (string)null;
      ((GameEventArgs)playerJoinedEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerJoinedEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "-\0";
      ss[1] = "-\0";
      this.PopulateWithArgs(playerJoinedEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException440()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      playerJoinedEventArgs = new PlayerJoinedEventArgs(1, "0\0");
      ((GameEventArgs)playerJoinedEventArgs).SenderId = 0;
      ((GameEventArgs)playerJoinedEventArgs).EventId = (string)null;
      ((GameEventArgs)playerJoinedEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerJoinedEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "0\0";
      ss[1] = "0\0";
      this.PopulateWithArgs(playerJoinedEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException537()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      playerJoinedEventArgs = new PlayerJoinedEventArgs(1, ":");
      ((GameEventArgs)playerJoinedEventArgs).SenderId = 0;
      ((GameEventArgs)playerJoinedEventArgs).EventId = (string)null;
      ((GameEventArgs)playerJoinedEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerJoinedEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = ":";
      ss[1] = ":";
      this.PopulateWithArgs(playerJoinedEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException252()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      playerJoinedEventArgs = new PlayerJoinedEventArgs(1, "-");
      ((GameEventArgs)playerJoinedEventArgs).SenderId = 0;
      ((GameEventArgs)playerJoinedEventArgs).EventId = (string)null;
      ((GameEventArgs)playerJoinedEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerJoinedEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "-";
      ss[1] = "-";
      this.PopulateWithArgs(playerJoinedEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException703()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      playerJoinedEventArgs = new PlayerJoinedEventArgs(1, "0");
      ((GameEventArgs)playerJoinedEventArgs).SenderId = 0;
      ((GameEventArgs)playerJoinedEventArgs).EventId = (string)null;
      ((GameEventArgs)playerJoinedEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerJoinedEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "0";
      ss[1] = "0";
      this.PopulateWithArgs(playerJoinedEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException407()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      playerJoinedEventArgs = new PlayerJoinedEventArgs(1, "\u0001");
      ((GameEventArgs)playerJoinedEventArgs).SenderId = 0;
      ((GameEventArgs)playerJoinedEventArgs).EventId = (string)null;
      ((GameEventArgs)playerJoinedEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerJoinedEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "\u0001";
      ss[1] = "\u0001";
      this.PopulateWithArgs(playerJoinedEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException61()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      playerJoinedEventArgs = new PlayerJoinedEventArgs(1, "\0");
      ((GameEventArgs)playerJoinedEventArgs).SenderId = 0;
      ((GameEventArgs)playerJoinedEventArgs).EventId = (string)null;
      ((GameEventArgs)playerJoinedEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerJoinedEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "\0";
      ss[1] = "\0";
      this.PopulateWithArgs(playerJoinedEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException646()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      playerJoinedEventArgs = new PlayerJoinedEventArgs(1, "");
      ((GameEventArgs)playerJoinedEventArgs).SenderId = 0;
      ((GameEventArgs)playerJoinedEventArgs).EventId = (string)null;
      ((GameEventArgs)playerJoinedEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerJoinedEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      ss[0] = "";
      ss[1] = "";
      this.PopulateWithArgs(playerJoinedEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException542()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      playerJoinedEventArgs = new PlayerJoinedEventArgs(1, "");
      ((GameEventArgs)playerJoinedEventArgs).SenderId = 0;
      ((GameEventArgs)playerJoinedEventArgs).EventId = (string)null;
      ((GameEventArgs)playerJoinedEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerJoinedEventArgs).NeedResponse = false;
      string[] ss = new string[2];
      this.PopulateWithArgs(playerJoinedEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException142()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      playerJoinedEventArgs = new PlayerJoinedEventArgs(1, "");
      ((GameEventArgs)playerJoinedEventArgs).SenderId = 0;
      ((GameEventArgs)playerJoinedEventArgs).EventId = (string)null;
      ((GameEventArgs)playerJoinedEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerJoinedEventArgs).NeedResponse = false;
      string[] ss = new string[0];
      this.PopulateWithArgs(playerJoinedEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayerJoinedEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException474()
{
    try
    {
      PlayerJoinedEventArgs playerJoinedEventArgs;
      playerJoinedEventArgs = new PlayerJoinedEventArgs(1, "");
      ((GameEventArgs)playerJoinedEventArgs).SenderId = 0;
      ((GameEventArgs)playerJoinedEventArgs).EventId = (string)null;
      ((GameEventArgs)playerJoinedEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playerJoinedEventArgs).NeedResponse = false;
      this.PopulateWithArgs(playerJoinedEventArgs, (string[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
