// <copyright file="BoardTest.IsThereLineOfSight01.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.Xna.Framework.Graphics;
using Descent.Model.Player.Figure;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;
using Microsoft.Xna.Framework;

namespace Descent.Model.Board
{
    public partial class BoardTest
    {
[TestMethod]
[PexGeneratedBy(typeof(BoardTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void IsThereLineOfSight01ThrowsContractException321()
{
    try
    {
      global::Descent.Model.Board.Board board;
      bool b;
      board = new global::Descent.Model.Board.Board(2, 2, (Texture2D)null);
      b = this.IsThereLineOfSight01
              (board, (global::Descent.Model.Player.Figure.Figure)null, 
               (global::Descent.Model.Player.Figure.Figure)null, false);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(BoardTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void IsThereLineOfSightThrowsContractException59()
{
    try
    {
      global::Descent.Model.Board.Board board;
      bool b;
      board = new global::Descent.Model.Board.Board(1022, 2, (Texture2D)null);
      Point s0 = default(Point);
      s0.X = 1023;
      s0.Y = default(int);
      b = this.IsThereLineOfSight(board, s0, default(Point), false);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(BoardTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void IsThereLineOfSightThrowsContractException213()
{
    try
    {
      global::Descent.Model.Board.Board board;
      bool b;
      board = new global::Descent.Model.Board.Board(2, 2, (Texture2D)null);
      Point s0 = default(Point);
      s0.X = int.MinValue;
      s0.Y = default(int);
      b = this.IsThereLineOfSight(board, s0, default(Point), false);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(BoardTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void IsThereLineOfSightThrowsContractException998()
{
    try
    {
      global::Descent.Model.Board.Board board;
      bool b;
      board = new global::Descent.Model.Board.Board(2, 2, (Texture2D)null);
      Point s0 = default(Point);
      s0.X = default(int);
      s0.Y = int.MinValue;
      b = this.IsThereLineOfSight(board, s0, default(Point), false);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(BoardTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void IsThereLineOfSightThrowsContractException730()
{
    try
    {
      global::Descent.Model.Board.Board board;
      bool b;
      board = new global::Descent.Model.Board.Board(2, 2, (Texture2D)null);
      b = this.IsThereLineOfSight(board, default(Point), default(Point), false);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
