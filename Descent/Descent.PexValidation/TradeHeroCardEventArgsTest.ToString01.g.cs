// <copyright file="TradeHeroCardEventArgsTest.ToString01.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace Descent.Messaging.Events
{
    public partial class TradeHeroCardEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(TradeHeroCardEventArgsTest))]
public void ToString01472()
{
    TradeHeroCardEventArgs tradeHeroCardEventArgs;
    string s;
    string[] ss = new string[1];
    ss[0] = "0";
    tradeHeroCardEventArgs = new TradeHeroCardEventArgs(ss);
    tradeHeroCardEventArgs.CardId = 8;
    ((GameEventArgs)tradeHeroCardEventArgs).SenderId = 0;
    ((GameEventArgs)tradeHeroCardEventArgs).EventId = (string)null;
    ((GameEventArgs)tradeHeroCardEventArgs).EventType = (EventType)0;
    ((GameEventArgs)tradeHeroCardEventArgs).NeedResponse = false;
    s = this.ToString01(tradeHeroCardEventArgs);
    Assert.AreEqual<string>("8", s);
    Assert.IsNotNull((object)tradeHeroCardEventArgs);
    Assert.AreEqual<int>(8, tradeHeroCardEventArgs.CardId);
    Assert.AreEqual<int>(0, ((GameEventArgs)tradeHeroCardEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)tradeHeroCardEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)tradeHeroCardEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)tradeHeroCardEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(TradeHeroCardEventArgsTest))]
public void ToString01556()
{
    TradeHeroCardEventArgs tradeHeroCardEventArgs;
    string s;
    string[] ss = new string[1];
    ss[0] = "0";
    tradeHeroCardEventArgs = new TradeHeroCardEventArgs(ss);
    tradeHeroCardEventArgs.CardId = 0;
    ((GameEventArgs)tradeHeroCardEventArgs).SenderId = 0;
    ((GameEventArgs)tradeHeroCardEventArgs).EventId = (string)null;
    ((GameEventArgs)tradeHeroCardEventArgs).EventType = (EventType)0;
    ((GameEventArgs)tradeHeroCardEventArgs).NeedResponse = false;
    s = this.ToString01(tradeHeroCardEventArgs);
    Assert.AreEqual<string>("0", s);
    Assert.IsNotNull((object)tradeHeroCardEventArgs);
    Assert.AreEqual<int>(0, tradeHeroCardEventArgs.CardId);
    Assert.AreEqual<int>(0, ((GameEventArgs)tradeHeroCardEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)tradeHeroCardEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)tradeHeroCardEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)tradeHeroCardEventArgs).NeedResponse);
}
    }
}
