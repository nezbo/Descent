// <copyright file="CoordinatesEventArgsTest.Constructor01.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Messaging.Events
{
    public partial class CoordinatesEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(CoordinatesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException452()
{
    try
    {
      CoordinatesEventArgs coordinatesEventArgs;
      string[] ss = new string[2];
      ss[0] = "-0";
      ss[1] = "-";
      coordinatesEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(CoordinatesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException199()
{
    try
    {
      CoordinatesEventArgs coordinatesEventArgs;
      string[] ss = new string[2];
      ss[0] = "-00\0";
      ss[1] = "\0";
      coordinatesEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(CoordinatesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException449()
{
    try
    {
      CoordinatesEventArgs coordinatesEventArgs;
      string[] ss = new string[2];
      ss[0] = "-0\0";
      ss[1] = "\0";
      coordinatesEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(CoordinatesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException614()
{
    try
    {
      CoordinatesEventArgs coordinatesEventArgs;
      string[] ss = new string[2];
      ss[0] = "-0\0";
      coordinatesEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(CoordinatesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException439()
{
    try
    {
      CoordinatesEventArgs coordinatesEventArgs;
      string[] ss = new string[2];
      ss[0] = "-\0";
      ss[1] = "-\0";
      coordinatesEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(CoordinatesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException978()
{
    try
    {
      CoordinatesEventArgs coordinatesEventArgs;
      string[] ss = new string[2];
      ss[0] = ":";
      ss[1] = ":";
      coordinatesEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(CoordinatesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException431()
{
    try
    {
      CoordinatesEventArgs coordinatesEventArgs;
      string[] ss = new string[2];
      ss[0] = "-";
      ss[1] = "-";
      coordinatesEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(CoordinatesEventArgsTest))]
public void Constructor01952()
{
    CoordinatesEventArgs coordinatesEventArgs;
    string[] ss = new string[2];
    ss[0] = "0";
    ss[1] = "0";
    coordinatesEventArgs = this.Constructor01(ss);
    Assert.IsNotNull((object)coordinatesEventArgs);
    Assert.AreEqual<int>(0, coordinatesEventArgs.X);
    Assert.AreEqual<int>(0, coordinatesEventArgs.Y);
    Assert.AreEqual<int>(0, ((GameEventArgs)coordinatesEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)coordinatesEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)coordinatesEventArgs).EventType);
    Assert.AreEqual<bool>(false, ((GameEventArgs)coordinatesEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(CoordinatesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException740()
{
    try
    {
      CoordinatesEventArgs coordinatesEventArgs;
      string[] ss = new string[2];
      ss[0] = "\u0001";
      ss[1] = "\u0001";
      coordinatesEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(CoordinatesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException481()
{
    try
    {
      CoordinatesEventArgs coordinatesEventArgs;
      string[] ss = new string[2];
      ss[0] = "\0\0";
      ss[1] = "\0\0";
      coordinatesEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(CoordinatesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException851()
{
    try
    {
      CoordinatesEventArgs coordinatesEventArgs;
      string[] ss = new string[2];
      ss[0] = "";
      ss[1] = "";
      coordinatesEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(CoordinatesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException510()
{
    try
    {
      CoordinatesEventArgs coordinatesEventArgs;
      string[] ss = new string[2];
      coordinatesEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(CoordinatesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException955()
{
    try
    {
      CoordinatesEventArgs coordinatesEventArgs;
      string[] ss = new string[0];
      coordinatesEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(CoordinatesEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException73()
{
    try
    {
      CoordinatesEventArgs coordinatesEventArgs;
      coordinatesEventArgs = this.Constructor01((string[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(CoordinatesEventArgsTest))]
public void Constructor205()
{
    CoordinatesEventArgs coordinatesEventArgs;
    coordinatesEventArgs = this.Constructor(0, 0);
    Assert.IsNotNull((object)coordinatesEventArgs);
    Assert.AreEqual<int>(0, coordinatesEventArgs.X);
    Assert.AreEqual<int>(0, coordinatesEventArgs.Y);
    Assert.AreEqual<int>(0, ((GameEventArgs)coordinatesEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)coordinatesEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)coordinatesEventArgs).EventType);
    Assert.AreEqual<bool>(false, ((GameEventArgs)coordinatesEventArgs).NeedResponse);
}
    }
}
