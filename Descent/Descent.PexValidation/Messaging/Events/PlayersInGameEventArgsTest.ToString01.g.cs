// <copyright file="PlayersInGameEventArgsTest.ToString01.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace Descent.Messaging.Events
{
    public partial class PlayersInGameEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
public void ToString01825()
{
    PlayersInGameEventArgs playersInGameEventArgs;
    string s;
    PlayerInGame[] playerInGames = new PlayerInGame[13];
    PlayerInGame s0 = default(PlayerInGame);
    s0.Id = default(int);
    s0.Nickname = "";
    playerInGames[7] = s0;
    PlayerInGame s1 = default(PlayerInGame);
    s1.Id = default(int);
    s1.Nickname = "";
    playerInGames[8] = s1;
    PlayerInGame s2 = default(PlayerInGame);
    s2.Id = default(int);
    s2.Nickname = "";
    playerInGames[9] = s2;
    PlayerInGame s3 = default(PlayerInGame);
    s3.Id = default(int);
    s3.Nickname = "";
    playerInGames[10] = s3;
    PlayerInGame s4 = default(PlayerInGame);
    s4.Id = default(int);
    s4.Nickname = "";
    playerInGames[11] = s4;
    PlayerInGame s5 = default(PlayerInGame);
    s5.Id = default(int);
    s5.Nickname = "";
    playerInGames[12] = s5;
    playersInGameEventArgs = new PlayersInGameEventArgs(playerInGames);
    ((GameEventArgs)playersInGameEventArgs).SenderId = 0;
    ((GameEventArgs)playersInGameEventArgs).EventId = (string)null;
    ((GameEventArgs)playersInGameEventArgs).EventType = (EventType)0;
    ((GameEventArgs)playersInGameEventArgs).NeedResponse = false;
    s = this.ToString01(playersInGameEventArgs);
    Assert.AreEqual<string>("13,0,,0,,0,,0,,0,,0,,0,,0,,0,,0,,0,,0,,0,", s);
    Assert.IsNotNull((object)playersInGameEventArgs);
    Assert.AreEqual<int>(13, playersInGameEventArgs.NumberOfPlayers);
    Assert.IsNotNull(playersInGameEventArgs.Players);
    Assert.AreEqual<int>(13, playersInGameEventArgs.Players.Length);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[0].Id);
    Assert.AreEqual<string>
        ((string)null, playersInGameEventArgs.Players[0].Nickname);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[1].Id);
    Assert.AreEqual<string>
        ((string)null, playersInGameEventArgs.Players[1].Nickname);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[2].Id);
    Assert.AreEqual<string>
        ((string)null, playersInGameEventArgs.Players[2].Nickname);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[3].Id);
    Assert.AreEqual<string>
        ((string)null, playersInGameEventArgs.Players[3].Nickname);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[4].Id);
    Assert.AreEqual<string>
        ((string)null, playersInGameEventArgs.Players[4].Nickname);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[5].Id);
    Assert.AreEqual<string>
        ((string)null, playersInGameEventArgs.Players[5].Nickname);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[6].Id);
    Assert.AreEqual<string>
        ((string)null, playersInGameEventArgs.Players[6].Nickname);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[7].Id);
    Assert.AreEqual<string>("", playersInGameEventArgs.Players[7].Nickname);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[8].Id);
    Assert.AreEqual<string>("", playersInGameEventArgs.Players[8].Nickname);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[9].Id);
    Assert.AreEqual<string>("", playersInGameEventArgs.Players[9].Nickname);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[10].Id);
    Assert.AreEqual<string>("", playersInGameEventArgs.Players[10].Nickname);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[11].Id);
    Assert.AreEqual<string>("", playersInGameEventArgs.Players[11].Nickname);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[12].Id);
    Assert.AreEqual<string>("", playersInGameEventArgs.Players[12].Nickname);
    Assert.AreEqual<int>(0, ((GameEventArgs)playersInGameEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)playersInGameEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)playersInGameEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)playersInGameEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
public void ToString01893()
{
    PlayersInGameEventArgs playersInGameEventArgs;
    string s;
    PlayerInGame[] playerInGames = new PlayerInGame[1];
    playersInGameEventArgs = new PlayersInGameEventArgs(playerInGames);
    ((GameEventArgs)playersInGameEventArgs).SenderId = 0;
    ((GameEventArgs)playersInGameEventArgs).EventId = (string)null;
    ((GameEventArgs)playersInGameEventArgs).EventType = (EventType)0;
    ((GameEventArgs)playersInGameEventArgs).NeedResponse = false;
    s = this.ToString01(playersInGameEventArgs);
    Assert.AreEqual<string>("1,0,", s);
    Assert.IsNotNull((object)playersInGameEventArgs);
    Assert.AreEqual<int>(1, playersInGameEventArgs.NumberOfPlayers);
    Assert.IsNotNull(playersInGameEventArgs.Players);
    Assert.AreEqual<int>(1, playersInGameEventArgs.Players.Length);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[0].Id);
    Assert.AreEqual<string>
        ((string)null, playersInGameEventArgs.Players[0].Nickname);
    Assert.AreEqual<int>(0, ((GameEventArgs)playersInGameEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)playersInGameEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)playersInGameEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)playersInGameEventArgs).NeedResponse);
}
    }
}
