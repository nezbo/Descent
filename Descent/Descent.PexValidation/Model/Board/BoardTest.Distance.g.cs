// <copyright file="BoardTest.Distance.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Model.Board
{
    public partial class BoardTest
    {
[TestMethod]
[PexGeneratedBy(typeof(BoardTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void DistanceThrowsContractException132()
{
    try
    {
      global::Descent.Model.Board.Board board;
      int i;
      board = new global::Descent.Model.Board.Board(2, 2, (Texture2D)null);
      Point s0 = default(Point);
      s0.X = int.MinValue;
      s0.Y = default(int);
      i = this.Distance(board, default(Point), s0);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(BoardTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void DistanceThrowsContractException332()
{
    try
    {
      global::Descent.Model.Board.Board board;
      int i;
      board = new global::Descent.Model.Board.Board(2, 2, (Texture2D)null);
      Point s0 = default(Point);
      s0.X = int.MinValue;
      s0.Y = default(int);
      i = this.Distance(board, s0, default(Point));
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(BoardTest))]
public void Distance334()
{
    global::Descent.Model.Board.Board board;
    int i;
    board = new global::Descent.Model.Board.Board(2, 2, (Texture2D)null);
    Point s0 = default(Point);
    s0.X = 144;
    s0.Y = default(int);
    Point s1 = default(Point);
    s1.X = 832;
    s1.Y = default(int);
    i = this.Distance(board, s0, s1);
    Assert.AreEqual<int>(688, i);
    Assert.IsNotNull((object)board);
    Assert.AreEqual<int>(2, board.Width);
    Assert.AreEqual<int>(2, board.Height);
    Assert.IsNotNull(board.FiguresOnBoard);
    Assert.IsNotNull(board.FiguresOnBoard.Comparer);
    Assert.AreEqual<int>(0, board.FiguresOnBoard.Count);
    Assert.IsNull(board.FloorTexture);
}
[TestMethod]
[PexGeneratedBy(typeof(BoardTest))]
public void Distance515()
{
    global::Descent.Model.Board.Board board;
    int i;
    board = new global::Descent.Model.Board.Board(2, 2, (Texture2D)null);
    i = this.Distance(board, default(Point), default(Point));
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)board);
    Assert.AreEqual<int>(2, board.Width);
    Assert.AreEqual<int>(2, board.Height);
    Assert.IsNotNull(board.FiguresOnBoard);
    Assert.IsNotNull(board.FiguresOnBoard.Comparer);
    Assert.AreEqual<int>(0, board.FiguresOnBoard.Count);
    Assert.IsNull(board.FloorTexture);
}
    }
}
