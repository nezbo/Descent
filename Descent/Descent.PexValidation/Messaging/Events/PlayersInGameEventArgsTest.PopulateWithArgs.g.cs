// <copyright file="PlayersInGameEventArgsTest.PopulateWithArgs.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Messaging.Events
{
    public partial class PlayersInGameEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
public void PopulateWithArgs263()
{
    PlayersInGameEventArgs playersInGameEventArgs;
    PlayerInGame[] playerInGames = new PlayerInGame[1];
    playersInGameEventArgs = new PlayersInGameEventArgs(playerInGames);
    ((GameEventArgs)playersInGameEventArgs).SenderId = 0;
    ((GameEventArgs)playersInGameEventArgs).EventId = (string)null;
    ((GameEventArgs)playersInGameEventArgs).EventType = (EventType)0;
    ((GameEventArgs)playersInGameEventArgs).NeedResponse = false;
    string[] ss = new string[7];
    ss[0] = "3";
    ss[1] = "0";
    ss[2] = "-0";
    ss[3] = "00";
    ss[4] = "00";
    ss[5] = "00";
    ss[6] = "00";
    this.PopulateWithArgs(playersInGameEventArgs, ss);
    Assert.IsNotNull((object)playersInGameEventArgs);
    Assert.AreEqual<int>(3, playersInGameEventArgs.NumberOfPlayers);
    Assert.IsNotNull(playersInGameEventArgs.Players);
    Assert.AreEqual<int>(3, playersInGameEventArgs.Players.Length);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[0].Id);
    Assert.AreEqual<string>("-0", playersInGameEventArgs.Players[0].Nickname);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[1].Id);
    Assert.AreEqual<string>("00", playersInGameEventArgs.Players[1].Nickname);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[2].Id);
    Assert.AreEqual<string>("00", playersInGameEventArgs.Players[2].Nickname);
    Assert.AreEqual<int>(0, ((GameEventArgs)playersInGameEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)playersInGameEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)playersInGameEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)playersInGameEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
public void PopulateWithArgs809()
{
    PlayersInGameEventArgs playersInGameEventArgs;
    PlayerInGame[] playerInGames = new PlayerInGame[1];
    playersInGameEventArgs = new PlayersInGameEventArgs(playerInGames);
    ((GameEventArgs)playersInGameEventArgs).SenderId = 0;
    ((GameEventArgs)playersInGameEventArgs).EventId = (string)null;
    ((GameEventArgs)playersInGameEventArgs).EventType = (EventType)0;
    ((GameEventArgs)playersInGameEventArgs).NeedResponse = false;
    string[] ss = new string[3];
    ss[0] = "1";
    ss[1] = "0";
    ss[2] = "0";
    this.PopulateWithArgs(playersInGameEventArgs, ss);
    Assert.IsNotNull((object)playersInGameEventArgs);
    Assert.AreEqual<int>(1, playersInGameEventArgs.NumberOfPlayers);
    Assert.IsNotNull(playersInGameEventArgs.Players);
    Assert.AreEqual<int>(1, playersInGameEventArgs.Players.Length);
    Assert.AreEqual<int>(0, playersInGameEventArgs.Players[0].Id);
    Assert.AreEqual<string>("0", playersInGameEventArgs.Players[0].Nickname);
    Assert.AreEqual<int>(0, ((GameEventArgs)playersInGameEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)playersInGameEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)playersInGameEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)playersInGameEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException480()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      PlayerInGame[] playerInGames = new PlayerInGame[1];
      playersInGameEventArgs = new PlayersInGameEventArgs(playerInGames);
      ((GameEventArgs)playersInGameEventArgs).SenderId = 0;
      ((GameEventArgs)playersInGameEventArgs).EventId = (string)null;
      ((GameEventArgs)playersInGameEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playersInGameEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      ss[0] = "-0\0";
      ss[1] = "-0\0";
      ss[2] = "-0\0";
      this.PopulateWithArgs(playersInGameEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException304()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      PlayerInGame[] playerInGames = new PlayerInGame[1];
      playersInGameEventArgs = new PlayersInGameEventArgs(playerInGames);
      ((GameEventArgs)playersInGameEventArgs).SenderId = 0;
      ((GameEventArgs)playersInGameEventArgs).EventId = (string)null;
      ((GameEventArgs)playersInGameEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playersInGameEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      ss[0] = "-0";
      ss[1] = "-0";
      ss[2] = "-0";
      this.PopulateWithArgs(playersInGameEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException277()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      PlayerInGame[] playerInGames = new PlayerInGame[1];
      playersInGameEventArgs = new PlayersInGameEventArgs(playerInGames);
      ((GameEventArgs)playersInGameEventArgs).SenderId = 0;
      ((GameEventArgs)playersInGameEventArgs).EventId = (string)null;
      ((GameEventArgs)playersInGameEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playersInGameEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      ss[0] = "0";
      ss[1] = "0";
      ss[2] = "0";
      this.PopulateWithArgs(playersInGameEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException212()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      PlayerInGame[] playerInGames = new PlayerInGame[1];
      playersInGameEventArgs = new PlayersInGameEventArgs(playerInGames);
      ((GameEventArgs)playersInGameEventArgs).SenderId = 0;
      ((GameEventArgs)playersInGameEventArgs).EventId = (string)null;
      ((GameEventArgs)playersInGameEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playersInGameEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      ss[0] = "-\0";
      ss[1] = "-\0";
      ss[2] = "-\0";
      this.PopulateWithArgs(playersInGameEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException476()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      PlayerInGame[] playerInGames = new PlayerInGame[1];
      playersInGameEventArgs = new PlayersInGameEventArgs(playerInGames);
      ((GameEventArgs)playersInGameEventArgs).SenderId = 0;
      ((GameEventArgs)playersInGameEventArgs).EventId = (string)null;
      ((GameEventArgs)playersInGameEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playersInGameEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      ss[0] = ":\0";
      ss[1] = ":\0";
      ss[2] = ":\0";
      this.PopulateWithArgs(playersInGameEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException382()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      PlayerInGame[] playerInGames = new PlayerInGame[1];
      playersInGameEventArgs = new PlayersInGameEventArgs(playerInGames);
      ((GameEventArgs)playersInGameEventArgs).SenderId = 0;
      ((GameEventArgs)playersInGameEventArgs).EventId = (string)null;
      ((GameEventArgs)playersInGameEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playersInGameEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      ss[0] = "-";
      ss[1] = "-";
      ss[2] = "-";
      this.PopulateWithArgs(playersInGameEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException385()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      PlayerInGame[] playerInGames = new PlayerInGame[1];
      playersInGameEventArgs = new PlayersInGameEventArgs(playerInGames);
      ((GameEventArgs)playersInGameEventArgs).SenderId = 0;
      ((GameEventArgs)playersInGameEventArgs).EventId = (string)null;
      ((GameEventArgs)playersInGameEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playersInGameEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      ss[0] = "\u0001";
      ss[1] = "\u0001";
      ss[2] = "\u0001";
      this.PopulateWithArgs(playersInGameEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException946()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      PlayerInGame[] playerInGames = new PlayerInGame[1];
      playersInGameEventArgs = new PlayersInGameEventArgs(playerInGames);
      ((GameEventArgs)playersInGameEventArgs).SenderId = 0;
      ((GameEventArgs)playersInGameEventArgs).EventId = (string)null;
      ((GameEventArgs)playersInGameEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playersInGameEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      ss[0] = "\0";
      ss[1] = "\0";
      ss[2] = "\0";
      this.PopulateWithArgs(playersInGameEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException789()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      PlayerInGame[] playerInGames = new PlayerInGame[1];
      playersInGameEventArgs = new PlayersInGameEventArgs(playerInGames);
      ((GameEventArgs)playersInGameEventArgs).SenderId = 0;
      ((GameEventArgs)playersInGameEventArgs).EventId = (string)null;
      ((GameEventArgs)playersInGameEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playersInGameEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      ss[0] = "";
      ss[1] = "";
      ss[2] = "";
      this.PopulateWithArgs(playersInGameEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException360()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      PlayerInGame[] playerInGames = new PlayerInGame[1];
      playersInGameEventArgs = new PlayersInGameEventArgs(playerInGames);
      ((GameEventArgs)playersInGameEventArgs).SenderId = 0;
      ((GameEventArgs)playersInGameEventArgs).EventId = (string)null;
      ((GameEventArgs)playersInGameEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playersInGameEventArgs).NeedResponse = false;
      string[] ss = new string[3];
      this.PopulateWithArgs(playersInGameEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException973()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      PlayerInGame[] playerInGames = new PlayerInGame[1];
      playersInGameEventArgs = new PlayersInGameEventArgs(playerInGames);
      ((GameEventArgs)playersInGameEventArgs).SenderId = 0;
      ((GameEventArgs)playersInGameEventArgs).EventId = (string)null;
      ((GameEventArgs)playersInGameEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playersInGameEventArgs).NeedResponse = false;
      string[] ss = new string[1];
      this.PopulateWithArgs(playersInGameEventArgs, ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PlayersInGameEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void PopulateWithArgsThrowsContractException778()
{
    try
    {
      PlayersInGameEventArgs playersInGameEventArgs;
      PlayerInGame[] playerInGames = new PlayerInGame[1];
      playersInGameEventArgs = new PlayersInGameEventArgs(playerInGames);
      ((GameEventArgs)playersInGameEventArgs).SenderId = 0;
      ((GameEventArgs)playersInGameEventArgs).EventId = (string)null;
      ((GameEventArgs)playersInGameEventArgs).EventType = (EventType)0;
      ((GameEventArgs)playersInGameEventArgs).NeedResponse = false;
      this.PopulateWithArgs(playersInGameEventArgs, (string[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
