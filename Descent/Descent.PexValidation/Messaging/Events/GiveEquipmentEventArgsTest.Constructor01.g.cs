// <copyright file="GiveEquipmentEventArgsTest.Constructor01.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace Descent.Messaging.Events
{
    public partial class GiveEquipmentEventArgsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(GiveEquipmentEventArgsTest))]
public void Constructor0158()
{
    GiveEquipmentEventArgs giveEquipmentEventArgs;
    string[] ss = new string[3];
    ss[0] = "1";
    ss[1] = "1";
    ss[2] = "0";
    giveEquipmentEventArgs = this.Constructor01(ss);
    Assert.IsNotNull((object)giveEquipmentEventArgs);
    Assert.AreEqual<int>(1, giveEquipmentEventArgs.PlayerId);
    Assert.AreEqual<int>(1, giveEquipmentEventArgs.EquipmentId);
    Assert.AreEqual<bool>(false, giveEquipmentEventArgs.Free);
    Assert.AreEqual<int>(0, ((GameEventArgs)giveEquipmentEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)giveEquipmentEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)giveEquipmentEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)giveEquipmentEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(GiveEquipmentEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException575()
{
    try
    {
      GiveEquipmentEventArgs giveEquipmentEventArgs;
      string[] ss = new string[3];
      ss[0] = "1";
      ss[1] = "0";
      ss[2] = "0";
      giveEquipmentEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveEquipmentEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException860()
{
    try
    {
      GiveEquipmentEventArgs giveEquipmentEventArgs;
      string[] ss = new string[3];
      ss[0] = "-\0";
      ss[1] = "-\0";
      ss[2] = "-\0";
      giveEquipmentEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveEquipmentEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException146()
{
    try
    {
      GiveEquipmentEventArgs giveEquipmentEventArgs;
      string[] ss = new string[3];
      ss[0] = "0";
      ss[1] = "0";
      ss[2] = "0";
      giveEquipmentEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveEquipmentEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException547()
{
    try
    {
      GiveEquipmentEventArgs giveEquipmentEventArgs;
      string[] ss = new string[3];
      ss[0] = "\u0001";
      ss[1] = "\u0001";
      ss[2] = "\u0001";
      giveEquipmentEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveEquipmentEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException820()
{
    try
    {
      GiveEquipmentEventArgs giveEquipmentEventArgs;
      string[] ss = new string[3];
      ss[0] = "\0\0";
      ss[1] = "\0\0";
      ss[2] = "\0\0";
      giveEquipmentEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveEquipmentEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException528()
{
    try
    {
      GiveEquipmentEventArgs giveEquipmentEventArgs;
      giveEquipmentEventArgs = this.Constructor01((string[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveEquipmentEventArgsTest))]
public void Constructor332()
{
    GiveEquipmentEventArgs giveEquipmentEventArgs;
    giveEquipmentEventArgs = this.Constructor(1, 1, false);
    Assert.IsNotNull((object)giveEquipmentEventArgs);
    Assert.AreEqual<int>(1, giveEquipmentEventArgs.PlayerId);
    Assert.AreEqual<int>(1, giveEquipmentEventArgs.EquipmentId);
    Assert.AreEqual<bool>(false, giveEquipmentEventArgs.Free);
    Assert.AreEqual<int>(0, ((GameEventArgs)giveEquipmentEventArgs).SenderId);
    Assert.AreEqual<string>
        ((string)null, ((GameEventArgs)giveEquipmentEventArgs).EventId);
    Assert.AreEqual<EventType>
        ((EventType)0, ((GameEventArgs)giveEquipmentEventArgs).EventType);
    Assert.AreEqual<bool>
        (false, ((GameEventArgs)giveEquipmentEventArgs).NeedResponse);
}
[TestMethod]
[PexGeneratedBy(typeof(GiveEquipmentEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException445()
{
    try
    {
      GiveEquipmentEventArgs giveEquipmentEventArgs;
      giveEquipmentEventArgs = this.Constructor(1, 0, false);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveEquipmentEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException811()
{
    try
    {
      GiveEquipmentEventArgs giveEquipmentEventArgs;
      giveEquipmentEventArgs = this.Constructor(0, 0, false);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveEquipmentEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException275()
{
    try
    {
      GiveEquipmentEventArgs giveEquipmentEventArgs;
      string[] ss = new string[0];
      giveEquipmentEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveEquipmentEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException170()
{
    try
    {
      GiveEquipmentEventArgs giveEquipmentEventArgs;
      string[] ss = new string[3];
      ss[0] = ":";
      ss[1] = ":";
      ss[2] = ":";
      giveEquipmentEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveEquipmentEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException609()
{
    try
    {
      GiveEquipmentEventArgs giveEquipmentEventArgs;
      string[] ss = new string[3];
      ss[0] = "";
      ss[1] = "";
      ss[2] = "";
      giveEquipmentEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveEquipmentEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException375()
{
    try
    {
      GiveEquipmentEventArgs giveEquipmentEventArgs;
      string[] ss = new string[3];
      ss[0] = "0\0";
      ss[1] = "0\0";
      ss[2] = "0\0";
      giveEquipmentEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveEquipmentEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException9()
{
    try
    {
      GiveEquipmentEventArgs giveEquipmentEventArgs;
      string[] ss = new string[3];
      giveEquipmentEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveEquipmentEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException114()
{
    try
    {
      GiveEquipmentEventArgs giveEquipmentEventArgs;
      string[] ss = new string[3];
      ss[0] = "-0";
      ss[1] = "-0";
      ss[2] = "-0";
      giveEquipmentEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(GiveEquipmentEventArgsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException479()
{
    try
    {
      GiveEquipmentEventArgs giveEquipmentEventArgs;
      string[] ss = new string[3];
      ss[0] = "-";
      ss[1] = "-";
      ss[2] = "-";
      giveEquipmentEventArgs = this.Constructor01(ss);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
